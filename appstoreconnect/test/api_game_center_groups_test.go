/*
App Store Connect API

Testing GameCenterGroupsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package appstoreconnect

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	openapiclient "github.com/micnncim/appstoreconnect-go/appstoreconnect"
)

func Test_appstoreconnect_GameCenterGroupsApiService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test GameCenterGroupsApiService GameCenterGroupsCreateInstance", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.GameCenterGroupsApi.GameCenterGroupsCreateInstance(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GameCenterGroupsApiService GameCenterGroupsDeleteInstance", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		httpRes, err := apiClient.GameCenterGroupsApi.GameCenterGroupsDeleteInstance(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GameCenterGroupsApiService GameCenterGroupsGameCenterAchievementsGetToManyRelated", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.GameCenterGroupsApi.GameCenterGroupsGameCenterAchievementsGetToManyRelated(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GameCenterGroupsApiService GameCenterGroupsGameCenterAchievementsGetToManyRelationship", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.GameCenterGroupsApi.GameCenterGroupsGameCenterAchievementsGetToManyRelationship(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GameCenterGroupsApiService GameCenterGroupsGameCenterAchievementsReplaceToManyRelationship", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		httpRes, err := apiClient.GameCenterGroupsApi.GameCenterGroupsGameCenterAchievementsReplaceToManyRelationship(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GameCenterGroupsApiService GameCenterGroupsGameCenterDetailsGetToManyRelated", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.GameCenterGroupsApi.GameCenterGroupsGameCenterDetailsGetToManyRelated(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GameCenterGroupsApiService GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.GameCenterGroupsApi.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelated(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GameCenterGroupsApiService GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.GameCenterGroupsApi.GameCenterGroupsGameCenterLeaderboardSetsGetToManyRelationship(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GameCenterGroupsApiService GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		httpRes, err := apiClient.GameCenterGroupsApi.GameCenterGroupsGameCenterLeaderboardSetsReplaceToManyRelationship(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GameCenterGroupsApiService GameCenterGroupsGameCenterLeaderboardsGetToManyRelated", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.GameCenterGroupsApi.GameCenterGroupsGameCenterLeaderboardsGetToManyRelated(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GameCenterGroupsApiService GameCenterGroupsGameCenterLeaderboardsGetToManyRelationship", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.GameCenterGroupsApi.GameCenterGroupsGameCenterLeaderboardsGetToManyRelationship(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GameCenterGroupsApiService GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		httpRes, err := apiClient.GameCenterGroupsApi.GameCenterGroupsGameCenterLeaderboardsReplaceToManyRelationship(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GameCenterGroupsApiService GameCenterGroupsGetCollection", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.GameCenterGroupsApi.GameCenterGroupsGetCollection(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GameCenterGroupsApiService GameCenterGroupsGetInstance", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.GameCenterGroupsApi.GameCenterGroupsGetInstance(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test GameCenterGroupsApiService GameCenterGroupsUpdateInstance", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.GameCenterGroupsApi.GameCenterGroupsUpdateInstance(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
