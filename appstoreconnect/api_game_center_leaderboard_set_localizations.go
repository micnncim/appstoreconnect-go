/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// GameCenterLeaderboardSetLocalizationsApiService GameCenterLeaderboardSetLocalizationsApi service
type GameCenterLeaderboardSetLocalizationsApiService service

type ApiGameCenterLeaderboardSetLocalizationsCreateInstanceRequest struct {
	ctx                                               context.Context
	ApiService                                        *GameCenterLeaderboardSetLocalizationsApiService
	gameCenterLeaderboardSetLocalizationCreateRequest *GameCenterLeaderboardSetLocalizationCreateRequest
}

// GameCenterLeaderboardSetLocalization representation
func (r ApiGameCenterLeaderboardSetLocalizationsCreateInstanceRequest) GameCenterLeaderboardSetLocalizationCreateRequest(gameCenterLeaderboardSetLocalizationCreateRequest GameCenterLeaderboardSetLocalizationCreateRequest) ApiGameCenterLeaderboardSetLocalizationsCreateInstanceRequest {
	r.gameCenterLeaderboardSetLocalizationCreateRequest = &gameCenterLeaderboardSetLocalizationCreateRequest
	return r
}

func (r ApiGameCenterLeaderboardSetLocalizationsCreateInstanceRequest) Execute() (*GameCenterLeaderboardSetLocalizationResponse, *http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetLocalizationsCreateInstanceExecute(r)
}

/*
GameCenterLeaderboardSetLocalizationsCreateInstance Method for GameCenterLeaderboardSetLocalizationsCreateInstance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGameCenterLeaderboardSetLocalizationsCreateInstanceRequest
*/
func (a *GameCenterLeaderboardSetLocalizationsApiService) GameCenterLeaderboardSetLocalizationsCreateInstance(ctx context.Context) ApiGameCenterLeaderboardSetLocalizationsCreateInstanceRequest {
	return ApiGameCenterLeaderboardSetLocalizationsCreateInstanceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GameCenterLeaderboardSetLocalizationResponse
func (a *GameCenterLeaderboardSetLocalizationsApiService) GameCenterLeaderboardSetLocalizationsCreateInstanceExecute(r ApiGameCenterLeaderboardSetLocalizationsCreateInstanceRequest) (*GameCenterLeaderboardSetLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GameCenterLeaderboardSetLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetLocalizationsApiService.GameCenterLeaderboardSetLocalizationsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSetLocalizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterLeaderboardSetLocalizationCreateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterLeaderboardSetLocalizationCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterLeaderboardSetLocalizationCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetLocalizationsDeleteInstanceRequest struct {
	ctx        context.Context
	ApiService *GameCenterLeaderboardSetLocalizationsApiService
	id         string
}

func (r ApiGameCenterLeaderboardSetLocalizationsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetLocalizationsDeleteInstanceExecute(r)
}

/*
GameCenterLeaderboardSetLocalizationsDeleteInstance Method for GameCenterLeaderboardSetLocalizationsDeleteInstance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterLeaderboardSetLocalizationsDeleteInstanceRequest
*/
func (a *GameCenterLeaderboardSetLocalizationsApiService) GameCenterLeaderboardSetLocalizationsDeleteInstance(ctx context.Context, id string) ApiGameCenterLeaderboardSetLocalizationsDeleteInstanceRequest {
	return ApiGameCenterLeaderboardSetLocalizationsDeleteInstanceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *GameCenterLeaderboardSetLocalizationsApiService) GameCenterLeaderboardSetLocalizationsDeleteInstanceExecute(r ApiGameCenterLeaderboardSetLocalizationsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetLocalizationsApiService.GameCenterLeaderboardSetLocalizationsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSetLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedRequest struct {
	ctx                                         context.Context
	ApiService                                  *GameCenterLeaderboardSetLocalizationsApiService
	id                                          string
	fieldsGameCenterLeaderboardSetLocalizations *[]string
	fieldsGameCenterLeaderboardSetImages        *[]string
	include                                     *[]string
}

// the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
func (r ApiGameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedRequest) FieldsGameCenterLeaderboardSetLocalizations(fieldsGameCenterLeaderboardSetLocalizations []string) ApiGameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedRequest {
	r.fieldsGameCenterLeaderboardSetLocalizations = &fieldsGameCenterLeaderboardSetLocalizations
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSetImages
func (r ApiGameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedRequest) FieldsGameCenterLeaderboardSetImages(fieldsGameCenterLeaderboardSetImages []string) ApiGameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedRequest {
	r.fieldsGameCenterLeaderboardSetImages = &fieldsGameCenterLeaderboardSetImages
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedRequest) Include(include []string) ApiGameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedRequest) Execute() (*GameCenterLeaderboardSetImageResponse, *http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedExecute(r)
}

/*
GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelated Method for GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedRequest
*/
func (a *GameCenterLeaderboardSetLocalizationsApiService) GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelated(ctx context.Context, id string) ApiGameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedRequest {
	return ApiGameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return GameCenterLeaderboardSetImageResponse
func (a *GameCenterLeaderboardSetLocalizationsApiService) GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedExecute(r ApiGameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelatedRequest) (*GameCenterLeaderboardSetImageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GameCenterLeaderboardSetImageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetLocalizationsApiService.GameCenterLeaderboardSetLocalizationsGameCenterLeaderboardSetImageGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSetLocalizations/{id}/gameCenterLeaderboardSetImage"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterLeaderboardSetLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetLocalizations]", r.fieldsGameCenterLeaderboardSetLocalizations, "csv")
	}
	if r.fieldsGameCenterLeaderboardSetImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetImages]", r.fieldsGameCenterLeaderboardSetImages, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetLocalizationsGetInstanceRequest struct {
	ctx                                         context.Context
	ApiService                                  *GameCenterLeaderboardSetLocalizationsApiService
	id                                          string
	fieldsGameCenterLeaderboardSetLocalizations *[]string
	include                                     *[]string
	fieldsGameCenterLeaderboardSetImages        *[]string
}

// the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
func (r ApiGameCenterLeaderboardSetLocalizationsGetInstanceRequest) FieldsGameCenterLeaderboardSetLocalizations(fieldsGameCenterLeaderboardSetLocalizations []string) ApiGameCenterLeaderboardSetLocalizationsGetInstanceRequest {
	r.fieldsGameCenterLeaderboardSetLocalizations = &fieldsGameCenterLeaderboardSetLocalizations
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterLeaderboardSetLocalizationsGetInstanceRequest) Include(include []string) ApiGameCenterLeaderboardSetLocalizationsGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSetImages
func (r ApiGameCenterLeaderboardSetLocalizationsGetInstanceRequest) FieldsGameCenterLeaderboardSetImages(fieldsGameCenterLeaderboardSetImages []string) ApiGameCenterLeaderboardSetLocalizationsGetInstanceRequest {
	r.fieldsGameCenterLeaderboardSetImages = &fieldsGameCenterLeaderboardSetImages
	return r
}

func (r ApiGameCenterLeaderboardSetLocalizationsGetInstanceRequest) Execute() (*GameCenterLeaderboardSetLocalizationResponse, *http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetLocalizationsGetInstanceExecute(r)
}

/*
GameCenterLeaderboardSetLocalizationsGetInstance Method for GameCenterLeaderboardSetLocalizationsGetInstance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterLeaderboardSetLocalizationsGetInstanceRequest
*/
func (a *GameCenterLeaderboardSetLocalizationsApiService) GameCenterLeaderboardSetLocalizationsGetInstance(ctx context.Context, id string) ApiGameCenterLeaderboardSetLocalizationsGetInstanceRequest {
	return ApiGameCenterLeaderboardSetLocalizationsGetInstanceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return GameCenterLeaderboardSetLocalizationResponse
func (a *GameCenterLeaderboardSetLocalizationsApiService) GameCenterLeaderboardSetLocalizationsGetInstanceExecute(r ApiGameCenterLeaderboardSetLocalizationsGetInstanceRequest) (*GameCenterLeaderboardSetLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GameCenterLeaderboardSetLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetLocalizationsApiService.GameCenterLeaderboardSetLocalizationsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSetLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterLeaderboardSetLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetLocalizations]", r.fieldsGameCenterLeaderboardSetLocalizations, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsGameCenterLeaderboardSetImages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetImages]", r.fieldsGameCenterLeaderboardSetImages, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterLeaderboardSetLocalizationsUpdateInstanceRequest struct {
	ctx                                               context.Context
	ApiService                                        *GameCenterLeaderboardSetLocalizationsApiService
	id                                                string
	gameCenterLeaderboardSetLocalizationUpdateRequest *GameCenterLeaderboardSetLocalizationUpdateRequest
}

// GameCenterLeaderboardSetLocalization representation
func (r ApiGameCenterLeaderboardSetLocalizationsUpdateInstanceRequest) GameCenterLeaderboardSetLocalizationUpdateRequest(gameCenterLeaderboardSetLocalizationUpdateRequest GameCenterLeaderboardSetLocalizationUpdateRequest) ApiGameCenterLeaderboardSetLocalizationsUpdateInstanceRequest {
	r.gameCenterLeaderboardSetLocalizationUpdateRequest = &gameCenterLeaderboardSetLocalizationUpdateRequest
	return r
}

func (r ApiGameCenterLeaderboardSetLocalizationsUpdateInstanceRequest) Execute() (*GameCenterLeaderboardSetLocalizationResponse, *http.Response, error) {
	return r.ApiService.GameCenterLeaderboardSetLocalizationsUpdateInstanceExecute(r)
}

/*
GameCenterLeaderboardSetLocalizationsUpdateInstance Method for GameCenterLeaderboardSetLocalizationsUpdateInstance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterLeaderboardSetLocalizationsUpdateInstanceRequest
*/
func (a *GameCenterLeaderboardSetLocalizationsApiService) GameCenterLeaderboardSetLocalizationsUpdateInstance(ctx context.Context, id string) ApiGameCenterLeaderboardSetLocalizationsUpdateInstanceRequest {
	return ApiGameCenterLeaderboardSetLocalizationsUpdateInstanceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return GameCenterLeaderboardSetLocalizationResponse
func (a *GameCenterLeaderboardSetLocalizationsApiService) GameCenterLeaderboardSetLocalizationsUpdateInstanceExecute(r ApiGameCenterLeaderboardSetLocalizationsUpdateInstanceRequest) (*GameCenterLeaderboardSetLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GameCenterLeaderboardSetLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterLeaderboardSetLocalizationsApiService.GameCenterLeaderboardSetLocalizationsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterLeaderboardSetLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterLeaderboardSetLocalizationUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterLeaderboardSetLocalizationUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterLeaderboardSetLocalizationUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
