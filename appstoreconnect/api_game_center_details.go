/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// GameCenterDetailsApiService GameCenterDetailsApi service
type GameCenterDetailsApiService service

type ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest struct {
	ctx                                 context.Context
	ApiService                          *GameCenterDetailsApiService
	id                                  string
	filterLive                          *[]string
	filterGameCenterAchievement         *[]string
	fieldsGameCenterAchievementReleases *[]string
	fieldsGameCenterDetails             *[]string
	fieldsGameCenterAchievements        *[]string
	limit                               *int32
	include                             *[]string
}

// filter by attribute &#39;live&#39;
func (r ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest) FilterLive(filterLive []string) ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest {
	r.filterLive = &filterLive
	return r
}

// filter by id(s) of related &#39;gameCenterAchievement&#39;
func (r ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest) FilterGameCenterAchievement(filterGameCenterAchievement []string) ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest {
	r.filterGameCenterAchievement = &filterGameCenterAchievement
	return r
}

// the fields to include for returned resources of type gameCenterAchievementReleases
func (r ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest) FieldsGameCenterAchievementReleases(fieldsGameCenterAchievementReleases []string) ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest {
	r.fieldsGameCenterAchievementReleases = &fieldsGameCenterAchievementReleases
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterAchievements
func (r ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest) FieldsGameCenterAchievements(fieldsGameCenterAchievements []string) ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest {
	r.fieldsGameCenterAchievements = &fieldsGameCenterAchievements
	return r
}

// maximum resources per page
func (r ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest) Include(include []string) ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest) Execute() (*GameCenterAchievementReleasesResponse, *http.Response, error) {
	return r.ApiService.GameCenterDetailsAchievementReleasesGetToManyRelatedExecute(r)
}

/*
GameCenterDetailsAchievementReleasesGetToManyRelated Method for GameCenterDetailsAchievementReleasesGetToManyRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest
*/
func (a *GameCenterDetailsApiService) GameCenterDetailsAchievementReleasesGetToManyRelated(ctx context.Context, id string) ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest {
	return ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return GameCenterAchievementReleasesResponse
func (a *GameCenterDetailsApiService) GameCenterDetailsAchievementReleasesGetToManyRelatedExecute(r ApiGameCenterDetailsAchievementReleasesGetToManyRelatedRequest) (*GameCenterAchievementReleasesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GameCenterAchievementReleasesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterDetailsApiService.GameCenterDetailsAchievementReleasesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}/achievementReleases"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterLive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[live]", r.filterLive, "csv")
	}
	if r.filterGameCenterAchievement != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterAchievement]", r.filterGameCenterAchievement, "csv")
	}
	if r.fieldsGameCenterAchievementReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementReleases]", r.fieldsGameCenterAchievementReleases, "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "csv")
	}
	if r.fieldsGameCenterAchievements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievements]", r.fieldsGameCenterAchievements, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterDetailsCreateInstanceRequest struct {
	ctx                           context.Context
	ApiService                    *GameCenterDetailsApiService
	gameCenterDetailCreateRequest *GameCenterDetailCreateRequest
}

// GameCenterDetail representation
func (r ApiGameCenterDetailsCreateInstanceRequest) GameCenterDetailCreateRequest(gameCenterDetailCreateRequest GameCenterDetailCreateRequest) ApiGameCenterDetailsCreateInstanceRequest {
	r.gameCenterDetailCreateRequest = &gameCenterDetailCreateRequest
	return r
}

func (r ApiGameCenterDetailsCreateInstanceRequest) Execute() (*GameCenterDetailResponse, *http.Response, error) {
	return r.ApiService.GameCenterDetailsCreateInstanceExecute(r)
}

/*
GameCenterDetailsCreateInstance Method for GameCenterDetailsCreateInstance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGameCenterDetailsCreateInstanceRequest
*/
func (a *GameCenterDetailsApiService) GameCenterDetailsCreateInstance(ctx context.Context) ApiGameCenterDetailsCreateInstanceRequest {
	return ApiGameCenterDetailsCreateInstanceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return GameCenterDetailResponse
func (a *GameCenterDetailsApiService) GameCenterDetailsCreateInstanceExecute(r ApiGameCenterDetailsCreateInstanceRequest) (*GameCenterDetailResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GameCenterDetailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterDetailsApiService.GameCenterDetailsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterDetailCreateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterDetailCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterDetailCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest struct {
	ctx                                      context.Context
	ApiService                               *GameCenterDetailsApiService
	id                                       string
	filterArchived                           *[]string
	filterReferenceName                      *[]string
	filterId                                 *[]string
	fieldsGameCenterAchievementReleases      *[]string
	fieldsGameCenterGroups                   *[]string
	fieldsGameCenterDetails                  *[]string
	fieldsGameCenterAchievementLocalizations *[]string
	fieldsGameCenterAchievements             *[]string
	limit                                    *int32
	limitLocalizations                       *int32
	limitReleases                            *int32
	include                                  *[]string
}

// filter by attribute &#39;archived&#39;
func (r ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest) FilterArchived(filterArchived []string) ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest {
	r.filterArchived = &filterArchived
	return r
}

// filter by attribute &#39;referenceName&#39;
func (r ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest) FilterReferenceName(filterReferenceName []string) ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest {
	r.filterReferenceName = &filterReferenceName
	return r
}

// filter by id(s)
func (r ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest) FilterId(filterId []string) ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest {
	r.filterId = &filterId
	return r
}

// the fields to include for returned resources of type gameCenterAchievementReleases
func (r ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest) FieldsGameCenterAchievementReleases(fieldsGameCenterAchievementReleases []string) ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest {
	r.fieldsGameCenterAchievementReleases = &fieldsGameCenterAchievementReleases
	return r
}

// the fields to include for returned resources of type gameCenterGroups
func (r ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest) FieldsGameCenterGroups(fieldsGameCenterGroups []string) ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest {
	r.fieldsGameCenterGroups = &fieldsGameCenterGroups
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterAchievementLocalizations
func (r ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest) FieldsGameCenterAchievementLocalizations(fieldsGameCenterAchievementLocalizations []string) ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest {
	r.fieldsGameCenterAchievementLocalizations = &fieldsGameCenterAchievementLocalizations
	return r
}

// the fields to include for returned resources of type gameCenterAchievements
func (r ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest) FieldsGameCenterAchievements(fieldsGameCenterAchievements []string) ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest {
	r.fieldsGameCenterAchievements = &fieldsGameCenterAchievements
	return r
}

// maximum resources per page
func (r ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// maximum number of related localizations returned (when they are included)
func (r ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest) LimitLocalizations(limitLocalizations int32) ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest {
	r.limitLocalizations = &limitLocalizations
	return r
}

// maximum number of related releases returned (when they are included)
func (r ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest) LimitReleases(limitReleases int32) ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest {
	r.limitReleases = &limitReleases
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest) Include(include []string) ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest) Execute() (*GameCenterAchievementsResponse, *http.Response, error) {
	return r.ApiService.GameCenterDetailsGameCenterAchievementsGetToManyRelatedExecute(r)
}

/*
GameCenterDetailsGameCenterAchievementsGetToManyRelated Method for GameCenterDetailsGameCenterAchievementsGetToManyRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest
*/
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterAchievementsGetToManyRelated(ctx context.Context, id string) ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest {
	return ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return GameCenterAchievementsResponse
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterAchievementsGetToManyRelatedExecute(r ApiGameCenterDetailsGameCenterAchievementsGetToManyRelatedRequest) (*GameCenterAchievementsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GameCenterAchievementsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterDetailsApiService.GameCenterDetailsGameCenterAchievementsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}/gameCenterAchievements"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterArchived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[archived]", r.filterArchived, "csv")
	}
	if r.filterReferenceName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[referenceName]", r.filterReferenceName, "csv")
	}
	if r.filterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[id]", r.filterId, "csv")
	}
	if r.fieldsGameCenterAchievementReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementReleases]", r.fieldsGameCenterAchievementReleases, "csv")
	}
	if r.fieldsGameCenterGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterGroups]", r.fieldsGameCenterGroups, "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "csv")
	}
	if r.fieldsGameCenterAchievementLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementLocalizations]", r.fieldsGameCenterAchievementLocalizations, "csv")
	}
	if r.fieldsGameCenterAchievements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievements]", r.fieldsGameCenterAchievements, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.limitLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[localizations]", r.limitLocalizations, "")
	}
	if r.limitReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[releases]", r.limitReleases, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterDetailsGameCenterAchievementsGetToManyRelationshipRequest struct {
	ctx        context.Context
	ApiService *GameCenterDetailsApiService
	id         string
	limit      *int32
}

// maximum resources per page
func (r ApiGameCenterDetailsGameCenterAchievementsGetToManyRelationshipRequest) Limit(limit int32) ApiGameCenterDetailsGameCenterAchievementsGetToManyRelationshipRequest {
	r.limit = &limit
	return r
}

func (r ApiGameCenterDetailsGameCenterAchievementsGetToManyRelationshipRequest) Execute() (*GameCenterDetailGameCenterAchievementsLinkagesResponse, *http.Response, error) {
	return r.ApiService.GameCenterDetailsGameCenterAchievementsGetToManyRelationshipExecute(r)
}

/*
GameCenterDetailsGameCenterAchievementsGetToManyRelationship Method for GameCenterDetailsGameCenterAchievementsGetToManyRelationship

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterDetailsGameCenterAchievementsGetToManyRelationshipRequest
*/
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterAchievementsGetToManyRelationship(ctx context.Context, id string) ApiGameCenterDetailsGameCenterAchievementsGetToManyRelationshipRequest {
	return ApiGameCenterDetailsGameCenterAchievementsGetToManyRelationshipRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return GameCenterDetailGameCenterAchievementsLinkagesResponse
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterAchievementsGetToManyRelationshipExecute(r ApiGameCenterDetailsGameCenterAchievementsGetToManyRelationshipRequest) (*GameCenterDetailGameCenterAchievementsLinkagesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GameCenterDetailGameCenterAchievementsLinkagesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterDetailsApiService.GameCenterDetailsGameCenterAchievementsGetToManyRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipRequest struct {
	ctx                                                   context.Context
	ApiService                                            *GameCenterDetailsApiService
	id                                                    string
	gameCenterDetailGameCenterAchievementsLinkagesRequest *GameCenterDetailGameCenterAchievementsLinkagesRequest
}

// List of related linkages
func (r ApiGameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipRequest) GameCenterDetailGameCenterAchievementsLinkagesRequest(gameCenterDetailGameCenterAchievementsLinkagesRequest GameCenterDetailGameCenterAchievementsLinkagesRequest) ApiGameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipRequest {
	r.gameCenterDetailGameCenterAchievementsLinkagesRequest = &gameCenterDetailGameCenterAchievementsLinkagesRequest
	return r
}

func (r ApiGameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipExecute(r)
}

/*
GameCenterDetailsGameCenterAchievementsReplaceToManyRelationship Method for GameCenterDetailsGameCenterAchievementsReplaceToManyRelationship

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipRequest
*/
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterAchievementsReplaceToManyRelationship(ctx context.Context, id string) ApiGameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipRequest {
	return ApiGameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipExecute(r ApiGameCenterDetailsGameCenterAchievementsReplaceToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterDetailsApiService.GameCenterDetailsGameCenterAchievementsReplaceToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}/relationships/gameCenterAchievements"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterDetailGameCenterAchievementsLinkagesRequest == nil {
		return nil, reportError("gameCenterDetailGameCenterAchievementsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterDetailGameCenterAchievementsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest struct {
	ctx                         context.Context
	ApiService                  *GameCenterDetailsApiService
	id                          string
	filterEnabled               *[]string
	fieldsAppStoreVersions      *[]string
	fieldsGameCenterAppVersions *[]string
	limit                       *int32
	limitCompatibilityVersions  *int32
	include                     *[]string
}

// filter by attribute &#39;enabled&#39;
func (r ApiGameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest) FilterEnabled(filterEnabled []string) ApiGameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest {
	r.filterEnabled = &filterEnabled
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r ApiGameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) ApiGameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type gameCenterAppVersions
func (r ApiGameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest) FieldsGameCenterAppVersions(fieldsGameCenterAppVersions []string) ApiGameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest {
	r.fieldsGameCenterAppVersions = &fieldsGameCenterAppVersions
	return r
}

// maximum resources per page
func (r ApiGameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// maximum number of related compatibilityVersions returned (when they are included)
func (r ApiGameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest) LimitCompatibilityVersions(limitCompatibilityVersions int32) ApiGameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest {
	r.limitCompatibilityVersions = &limitCompatibilityVersions
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest) Include(include []string) ApiGameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest) Execute() (*GameCenterAppVersionsResponse, *http.Response, error) {
	return r.ApiService.GameCenterDetailsGameCenterAppVersionsGetToManyRelatedExecute(r)
}

/*
GameCenterDetailsGameCenterAppVersionsGetToManyRelated Method for GameCenterDetailsGameCenterAppVersionsGetToManyRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest
*/
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterAppVersionsGetToManyRelated(ctx context.Context, id string) ApiGameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest {
	return ApiGameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return GameCenterAppVersionsResponse
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterAppVersionsGetToManyRelatedExecute(r ApiGameCenterDetailsGameCenterAppVersionsGetToManyRelatedRequest) (*GameCenterAppVersionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GameCenterAppVersionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterDetailsApiService.GameCenterDetailsGameCenterAppVersionsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}/gameCenterAppVersions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterEnabled != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[enabled]", r.filterEnabled, "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "csv")
	}
	if r.fieldsGameCenterAppVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAppVersions]", r.fieldsGameCenterAppVersions, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.limitCompatibilityVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[compatibilityVersions]", r.limitCompatibilityVersions, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest struct {
	ctx                             context.Context
	ApiService                      *GameCenterDetailsApiService
	id                              string
	fieldsGameCenterLeaderboardSets *[]string
	fieldsGameCenterGroups          *[]string
	fieldsGameCenterDetails         *[]string
	fieldsGameCenterLeaderboards    *[]string
	fieldsGameCenterAchievements    *[]string
	limitGameCenterDetails          *int32
	limitGameCenterLeaderboards     *int32
	limitGameCenterLeaderboardSets  *int32
	limitGameCenterAchievements     *int32
	include                         *[]string
}

// the fields to include for returned resources of type gameCenterLeaderboardSets
func (r ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest) FieldsGameCenterLeaderboardSets(fieldsGameCenterLeaderboardSets []string) ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest {
	r.fieldsGameCenterLeaderboardSets = &fieldsGameCenterLeaderboardSets
	return r
}

// the fields to include for returned resources of type gameCenterGroups
func (r ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest) FieldsGameCenterGroups(fieldsGameCenterGroups []string) ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest {
	r.fieldsGameCenterGroups = &fieldsGameCenterGroups
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboards
func (r ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest) FieldsGameCenterLeaderboards(fieldsGameCenterLeaderboards []string) ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest {
	r.fieldsGameCenterLeaderboards = &fieldsGameCenterLeaderboards
	return r
}

// the fields to include for returned resources of type gameCenterAchievements
func (r ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest) FieldsGameCenterAchievements(fieldsGameCenterAchievements []string) ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest {
	r.fieldsGameCenterAchievements = &fieldsGameCenterAchievements
	return r
}

// maximum number of related gameCenterDetails returned (when they are included)
func (r ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest) LimitGameCenterDetails(limitGameCenterDetails int32) ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest {
	r.limitGameCenterDetails = &limitGameCenterDetails
	return r
}

// maximum number of related gameCenterLeaderboards returned (when they are included)
func (r ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest) LimitGameCenterLeaderboards(limitGameCenterLeaderboards int32) ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest {
	r.limitGameCenterLeaderboards = &limitGameCenterLeaderboards
	return r
}

// maximum number of related gameCenterLeaderboardSets returned (when they are included)
func (r ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest) LimitGameCenterLeaderboardSets(limitGameCenterLeaderboardSets int32) ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest {
	r.limitGameCenterLeaderboardSets = &limitGameCenterLeaderboardSets
	return r
}

// maximum number of related gameCenterAchievements returned (when they are included)
func (r ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest) LimitGameCenterAchievements(limitGameCenterAchievements int32) ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest {
	r.limitGameCenterAchievements = &limitGameCenterAchievements
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest) Include(include []string) ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest) Execute() (*GameCenterGroupResponse, *http.Response, error) {
	return r.ApiService.GameCenterDetailsGameCenterGroupGetToOneRelatedExecute(r)
}

/*
GameCenterDetailsGameCenterGroupGetToOneRelated Method for GameCenterDetailsGameCenterGroupGetToOneRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest
*/
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterGroupGetToOneRelated(ctx context.Context, id string) ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest {
	return ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return GameCenterGroupResponse
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterGroupGetToOneRelatedExecute(r ApiGameCenterDetailsGameCenterGroupGetToOneRelatedRequest) (*GameCenterGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GameCenterGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterDetailsApiService.GameCenterDetailsGameCenterGroupGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}/gameCenterGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSets]", r.fieldsGameCenterLeaderboardSets, "csv")
	}
	if r.fieldsGameCenterGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterGroups]", r.fieldsGameCenterGroups, "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "csv")
	}
	if r.fieldsGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboards]", r.fieldsGameCenterLeaderboards, "csv")
	}
	if r.fieldsGameCenterAchievements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievements]", r.fieldsGameCenterAchievements, "csv")
	}
	if r.limitGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterDetails]", r.limitGameCenterDetails, "")
	}
	if r.limitGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterLeaderboards]", r.limitGameCenterLeaderboards, "")
	}
	if r.limitGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterLeaderboardSets]", r.limitGameCenterLeaderboardSets, "")
	}
	if r.limitGameCenterAchievements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterAchievements]", r.limitGameCenterAchievements, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest struct {
	ctx                                         context.Context
	ApiService                                  *GameCenterDetailsApiService
	id                                          string
	filterReferenceName                         *[]string
	filterId                                    *[]string
	fieldsGameCenterLeaderboardSetLocalizations *[]string
	fieldsGameCenterLeaderboardSetReleases      *[]string
	fieldsGameCenterLeaderboardSets             *[]string
	fieldsGameCenterGroups                      *[]string
	fieldsGameCenterDetails                     *[]string
	fieldsGameCenterLeaderboards                *[]string
	limit                                       *int32
	limitLocalizations                          *int32
	limitGameCenterLeaderboards                 *int32
	limitReleases                               *int32
	include                                     *[]string
}

// filter by attribute &#39;referenceName&#39;
func (r ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest) FilterReferenceName(filterReferenceName []string) ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.filterReferenceName = &filterReferenceName
	return r
}

// filter by id(s)
func (r ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest) FilterId(filterId []string) ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.filterId = &filterId
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSetLocalizations
func (r ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest) FieldsGameCenterLeaderboardSetLocalizations(fieldsGameCenterLeaderboardSetLocalizations []string) ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardSetLocalizations = &fieldsGameCenterLeaderboardSetLocalizations
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSetReleases
func (r ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest) FieldsGameCenterLeaderboardSetReleases(fieldsGameCenterLeaderboardSetReleases []string) ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardSetReleases = &fieldsGameCenterLeaderboardSetReleases
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSets
func (r ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest) FieldsGameCenterLeaderboardSets(fieldsGameCenterLeaderboardSets []string) ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardSets = &fieldsGameCenterLeaderboardSets
	return r
}

// the fields to include for returned resources of type gameCenterGroups
func (r ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest) FieldsGameCenterGroups(fieldsGameCenterGroups []string) ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.fieldsGameCenterGroups = &fieldsGameCenterGroups
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboards
func (r ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest) FieldsGameCenterLeaderboards(fieldsGameCenterLeaderboards []string) ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboards = &fieldsGameCenterLeaderboards
	return r
}

// maximum resources per page
func (r ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// maximum number of related localizations returned (when they are included)
func (r ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest) LimitLocalizations(limitLocalizations int32) ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.limitLocalizations = &limitLocalizations
	return r
}

// maximum number of related gameCenterLeaderboards returned (when they are included)
func (r ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest) LimitGameCenterLeaderboards(limitGameCenterLeaderboards int32) ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.limitGameCenterLeaderboards = &limitGameCenterLeaderboards
	return r
}

// maximum number of related releases returned (when they are included)
func (r ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest) LimitReleases(limitReleases int32) ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.limitReleases = &limitReleases
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest) Include(include []string) ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest) Execute() (*GameCenterLeaderboardSetsResponse, *http.Response, error) {
	return r.ApiService.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedExecute(r)
}

/*
GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated Method for GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest
*/
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated(ctx context.Context, id string) ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest {
	return ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return GameCenterLeaderboardSetsResponse
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedExecute(r ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelatedRequest) (*GameCenterLeaderboardSetsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GameCenterLeaderboardSetsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterDetailsApiService.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}/gameCenterLeaderboardSets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterReferenceName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[referenceName]", r.filterReferenceName, "csv")
	}
	if r.filterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[id]", r.filterId, "csv")
	}
	if r.fieldsGameCenterLeaderboardSetLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetLocalizations]", r.fieldsGameCenterLeaderboardSetLocalizations, "csv")
	}
	if r.fieldsGameCenterLeaderboardSetReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetReleases]", r.fieldsGameCenterLeaderboardSetReleases, "csv")
	}
	if r.fieldsGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSets]", r.fieldsGameCenterLeaderboardSets, "csv")
	}
	if r.fieldsGameCenterGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterGroups]", r.fieldsGameCenterGroups, "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "csv")
	}
	if r.fieldsGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboards]", r.fieldsGameCenterLeaderboards, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.limitLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[localizations]", r.limitLocalizations, "")
	}
	if r.limitGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterLeaderboards]", r.limitGameCenterLeaderboards, "")
	}
	if r.limitReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[releases]", r.limitReleases, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipRequest struct {
	ctx        context.Context
	ApiService *GameCenterDetailsApiService
	id         string
	limit      *int32
}

// maximum resources per page
func (r ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipRequest) Limit(limit int32) ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipRequest {
	r.limit = &limit
	return r
}

func (r ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipRequest) Execute() (*GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse, *http.Response, error) {
	return r.ApiService.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipExecute(r)
}

/*
GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship Method for GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipRequest
*/
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship(ctx context.Context, id string) ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipRequest {
	return ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipExecute(r ApiGameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationshipRequest) (*GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GameCenterDetailGameCenterLeaderboardSetsLinkagesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterDetailsApiService.GameCenterDetailsGameCenterLeaderboardSetsGetToManyRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest struct {
	ctx                                                      context.Context
	ApiService                                               *GameCenterDetailsApiService
	id                                                       string
	gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest *GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest
}

// List of related linkages
func (r ApiGameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest) GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest(gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest GameCenterDetailGameCenterLeaderboardSetsLinkagesRequest) ApiGameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest {
	r.gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest = &gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest
	return r
}

func (r ApiGameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipExecute(r)
}

/*
GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship Method for GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest
*/
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship(ctx context.Context, id string) ApiGameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest {
	return ApiGameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipExecute(r ApiGameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterDetailsApiService.GameCenterDetailsGameCenterLeaderboardSetsReplaceToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboardSets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest == nil {
		return nil, reportError("gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterDetailGameCenterLeaderboardSetsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest struct {
	ctx                                      context.Context
	ApiService                               *GameCenterDetailsApiService
	id                                       string
	filterArchived                           *[]string
	filterReferenceName                      *[]string
	filterId                                 *[]string
	fieldsGameCenterLeaderboardLocalizations *[]string
	fieldsGameCenterLeaderboardSets          *[]string
	fieldsGameCenterGroups                   *[]string
	fieldsGameCenterDetails                  *[]string
	fieldsGameCenterLeaderboards             *[]string
	fieldsGameCenterLeaderboardReleases      *[]string
	limit                                    *int32
	limitGameCenterLeaderboardSets           *int32
	limitLocalizations                       *int32
	limitReleases                            *int32
	include                                  *[]string
}

// filter by attribute &#39;archived&#39;
func (r ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest) FilterArchived(filterArchived []string) ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.filterArchived = &filterArchived
	return r
}

// filter by attribute &#39;referenceName&#39;
func (r ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest) FilterReferenceName(filterReferenceName []string) ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.filterReferenceName = &filterReferenceName
	return r
}

// filter by id(s)
func (r ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest) FilterId(filterId []string) ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.filterId = &filterId
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardLocalizations
func (r ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest) FieldsGameCenterLeaderboardLocalizations(fieldsGameCenterLeaderboardLocalizations []string) ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardLocalizations = &fieldsGameCenterLeaderboardLocalizations
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSets
func (r ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest) FieldsGameCenterLeaderboardSets(fieldsGameCenterLeaderboardSets []string) ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardSets = &fieldsGameCenterLeaderboardSets
	return r
}

// the fields to include for returned resources of type gameCenterGroups
func (r ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest) FieldsGameCenterGroups(fieldsGameCenterGroups []string) ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.fieldsGameCenterGroups = &fieldsGameCenterGroups
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboards
func (r ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest) FieldsGameCenterLeaderboards(fieldsGameCenterLeaderboards []string) ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboards = &fieldsGameCenterLeaderboards
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardReleases
func (r ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest) FieldsGameCenterLeaderboardReleases(fieldsGameCenterLeaderboardReleases []string) ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardReleases = &fieldsGameCenterLeaderboardReleases
	return r
}

// maximum resources per page
func (r ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// maximum number of related gameCenterLeaderboardSets returned (when they are included)
func (r ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest) LimitGameCenterLeaderboardSets(limitGameCenterLeaderboardSets int32) ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.limitGameCenterLeaderboardSets = &limitGameCenterLeaderboardSets
	return r
}

// maximum number of related localizations returned (when they are included)
func (r ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest) LimitLocalizations(limitLocalizations int32) ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.limitLocalizations = &limitLocalizations
	return r
}

// maximum number of related releases returned (when they are included)
func (r ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest) LimitReleases(limitReleases int32) ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.limitReleases = &limitReleases
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest) Include(include []string) ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest) Execute() (*GameCenterLeaderboardsResponse, *http.Response, error) {
	return r.ApiService.GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedExecute(r)
}

/*
GameCenterDetailsGameCenterLeaderboardsGetToManyRelated Method for GameCenterDetailsGameCenterLeaderboardsGetToManyRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest
*/
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterLeaderboardsGetToManyRelated(ctx context.Context, id string) ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest {
	return ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return GameCenterLeaderboardsResponse
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterLeaderboardsGetToManyRelatedExecute(r ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelatedRequest) (*GameCenterLeaderboardsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GameCenterLeaderboardsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterDetailsApiService.GameCenterDetailsGameCenterLeaderboardsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}/gameCenterLeaderboards"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterArchived != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[archived]", r.filterArchived, "csv")
	}
	if r.filterReferenceName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[referenceName]", r.filterReferenceName, "csv")
	}
	if r.filterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[id]", r.filterId, "csv")
	}
	if r.fieldsGameCenterLeaderboardLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardLocalizations]", r.fieldsGameCenterLeaderboardLocalizations, "csv")
	}
	if r.fieldsGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSets]", r.fieldsGameCenterLeaderboardSets, "csv")
	}
	if r.fieldsGameCenterGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterGroups]", r.fieldsGameCenterGroups, "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "csv")
	}
	if r.fieldsGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboards]", r.fieldsGameCenterLeaderboards, "csv")
	}
	if r.fieldsGameCenterLeaderboardReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardReleases]", r.fieldsGameCenterLeaderboardReleases, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.limitGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterLeaderboardSets]", r.limitGameCenterLeaderboardSets, "")
	}
	if r.limitLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[localizations]", r.limitLocalizations, "")
	}
	if r.limitReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[releases]", r.limitReleases, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipRequest struct {
	ctx        context.Context
	ApiService *GameCenterDetailsApiService
	id         string
	limit      *int32
}

// maximum resources per page
func (r ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipRequest) Limit(limit int32) ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipRequest {
	r.limit = &limit
	return r
}

func (r ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipRequest) Execute() (*GameCenterDetailGameCenterLeaderboardsLinkagesResponse, *http.Response, error) {
	return r.ApiService.GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipExecute(r)
}

/*
GameCenterDetailsGameCenterLeaderboardsGetToManyRelationship Method for GameCenterDetailsGameCenterLeaderboardsGetToManyRelationship

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipRequest
*/
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterLeaderboardsGetToManyRelationship(ctx context.Context, id string) ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipRequest {
	return ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return GameCenterDetailGameCenterLeaderboardsLinkagesResponse
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipExecute(r ApiGameCenterDetailsGameCenterLeaderboardsGetToManyRelationshipRequest) (*GameCenterDetailGameCenterLeaderboardsLinkagesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GameCenterDetailGameCenterLeaderboardsLinkagesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterDetailsApiService.GameCenterDetailsGameCenterLeaderboardsGetToManyRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipRequest struct {
	ctx                                                   context.Context
	ApiService                                            *GameCenterDetailsApiService
	id                                                    string
	gameCenterDetailGameCenterLeaderboardsLinkagesRequest *GameCenterDetailGameCenterLeaderboardsLinkagesRequest
}

// List of related linkages
func (r ApiGameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipRequest) GameCenterDetailGameCenterLeaderboardsLinkagesRequest(gameCenterDetailGameCenterLeaderboardsLinkagesRequest GameCenterDetailGameCenterLeaderboardsLinkagesRequest) ApiGameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipRequest {
	r.gameCenterDetailGameCenterLeaderboardsLinkagesRequest = &gameCenterDetailGameCenterLeaderboardsLinkagesRequest
	return r
}

func (r ApiGameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipExecute(r)
}

/*
GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship Method for GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipRequest
*/
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship(ctx context.Context, id string) ApiGameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipRequest {
	return ApiGameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *GameCenterDetailsApiService) GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipExecute(r ApiGameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterDetailsApiService.GameCenterDetailsGameCenterLeaderboardsReplaceToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}/relationships/gameCenterLeaderboards"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterDetailGameCenterLeaderboardsLinkagesRequest == nil {
		return nil, reportError("gameCenterDetailGameCenterLeaderboardsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterDetailGameCenterLeaderboardsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGameCenterDetailsGetInstanceRequest struct {
	ctx                                    context.Context
	ApiService                             *GameCenterDetailsApiService
	id                                     string
	fieldsGameCenterDetails                *[]string
	include                                *[]string
	fieldsGameCenterAchievementReleases    *[]string
	fieldsGameCenterLeaderboardSetReleases *[]string
	fieldsGameCenterLeaderboardSets        *[]string
	fieldsGameCenterGroups                 *[]string
	fieldsGameCenterLeaderboards           *[]string
	fieldsGameCenterAchievements           *[]string
	fieldsGameCenterAppVersions            *[]string
	fieldsGameCenterLeaderboardReleases    *[]string
	limitAchievementReleases               *int32
	limitGameCenterAchievements            *int32
	limitGameCenterAppVersions             *int32
	limitGameCenterLeaderboardSets         *int32
	limitGameCenterLeaderboards            *int32
	limitLeaderboardReleases               *int32
	limitLeaderboardSetReleases            *int32
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterDetailsGetInstanceRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterDetailsGetInstanceRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterDetailsGetInstanceRequest) Include(include []string) ApiGameCenterDetailsGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type gameCenterAchievementReleases
func (r ApiGameCenterDetailsGetInstanceRequest) FieldsGameCenterAchievementReleases(fieldsGameCenterAchievementReleases []string) ApiGameCenterDetailsGetInstanceRequest {
	r.fieldsGameCenterAchievementReleases = &fieldsGameCenterAchievementReleases
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSetReleases
func (r ApiGameCenterDetailsGetInstanceRequest) FieldsGameCenterLeaderboardSetReleases(fieldsGameCenterLeaderboardSetReleases []string) ApiGameCenterDetailsGetInstanceRequest {
	r.fieldsGameCenterLeaderboardSetReleases = &fieldsGameCenterLeaderboardSetReleases
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSets
func (r ApiGameCenterDetailsGetInstanceRequest) FieldsGameCenterLeaderboardSets(fieldsGameCenterLeaderboardSets []string) ApiGameCenterDetailsGetInstanceRequest {
	r.fieldsGameCenterLeaderboardSets = &fieldsGameCenterLeaderboardSets
	return r
}

// the fields to include for returned resources of type gameCenterGroups
func (r ApiGameCenterDetailsGetInstanceRequest) FieldsGameCenterGroups(fieldsGameCenterGroups []string) ApiGameCenterDetailsGetInstanceRequest {
	r.fieldsGameCenterGroups = &fieldsGameCenterGroups
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboards
func (r ApiGameCenterDetailsGetInstanceRequest) FieldsGameCenterLeaderboards(fieldsGameCenterLeaderboards []string) ApiGameCenterDetailsGetInstanceRequest {
	r.fieldsGameCenterLeaderboards = &fieldsGameCenterLeaderboards
	return r
}

// the fields to include for returned resources of type gameCenterAchievements
func (r ApiGameCenterDetailsGetInstanceRequest) FieldsGameCenterAchievements(fieldsGameCenterAchievements []string) ApiGameCenterDetailsGetInstanceRequest {
	r.fieldsGameCenterAchievements = &fieldsGameCenterAchievements
	return r
}

// the fields to include for returned resources of type gameCenterAppVersions
func (r ApiGameCenterDetailsGetInstanceRequest) FieldsGameCenterAppVersions(fieldsGameCenterAppVersions []string) ApiGameCenterDetailsGetInstanceRequest {
	r.fieldsGameCenterAppVersions = &fieldsGameCenterAppVersions
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardReleases
func (r ApiGameCenterDetailsGetInstanceRequest) FieldsGameCenterLeaderboardReleases(fieldsGameCenterLeaderboardReleases []string) ApiGameCenterDetailsGetInstanceRequest {
	r.fieldsGameCenterLeaderboardReleases = &fieldsGameCenterLeaderboardReleases
	return r
}

// maximum number of related achievementReleases returned (when they are included)
func (r ApiGameCenterDetailsGetInstanceRequest) LimitAchievementReleases(limitAchievementReleases int32) ApiGameCenterDetailsGetInstanceRequest {
	r.limitAchievementReleases = &limitAchievementReleases
	return r
}

// maximum number of related gameCenterAchievements returned (when they are included)
func (r ApiGameCenterDetailsGetInstanceRequest) LimitGameCenterAchievements(limitGameCenterAchievements int32) ApiGameCenterDetailsGetInstanceRequest {
	r.limitGameCenterAchievements = &limitGameCenterAchievements
	return r
}

// maximum number of related gameCenterAppVersions returned (when they are included)
func (r ApiGameCenterDetailsGetInstanceRequest) LimitGameCenterAppVersions(limitGameCenterAppVersions int32) ApiGameCenterDetailsGetInstanceRequest {
	r.limitGameCenterAppVersions = &limitGameCenterAppVersions
	return r
}

// maximum number of related gameCenterLeaderboardSets returned (when they are included)
func (r ApiGameCenterDetailsGetInstanceRequest) LimitGameCenterLeaderboardSets(limitGameCenterLeaderboardSets int32) ApiGameCenterDetailsGetInstanceRequest {
	r.limitGameCenterLeaderboardSets = &limitGameCenterLeaderboardSets
	return r
}

// maximum number of related gameCenterLeaderboards returned (when they are included)
func (r ApiGameCenterDetailsGetInstanceRequest) LimitGameCenterLeaderboards(limitGameCenterLeaderboards int32) ApiGameCenterDetailsGetInstanceRequest {
	r.limitGameCenterLeaderboards = &limitGameCenterLeaderboards
	return r
}

// maximum number of related leaderboardReleases returned (when they are included)
func (r ApiGameCenterDetailsGetInstanceRequest) LimitLeaderboardReleases(limitLeaderboardReleases int32) ApiGameCenterDetailsGetInstanceRequest {
	r.limitLeaderboardReleases = &limitLeaderboardReleases
	return r
}

// maximum number of related leaderboardSetReleases returned (when they are included)
func (r ApiGameCenterDetailsGetInstanceRequest) LimitLeaderboardSetReleases(limitLeaderboardSetReleases int32) ApiGameCenterDetailsGetInstanceRequest {
	r.limitLeaderboardSetReleases = &limitLeaderboardSetReleases
	return r
}

func (r ApiGameCenterDetailsGetInstanceRequest) Execute() (*GameCenterDetailResponse, *http.Response, error) {
	return r.ApiService.GameCenterDetailsGetInstanceExecute(r)
}

/*
GameCenterDetailsGetInstance Method for GameCenterDetailsGetInstance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterDetailsGetInstanceRequest
*/
func (a *GameCenterDetailsApiService) GameCenterDetailsGetInstance(ctx context.Context, id string) ApiGameCenterDetailsGetInstanceRequest {
	return ApiGameCenterDetailsGetInstanceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return GameCenterDetailResponse
func (a *GameCenterDetailsApiService) GameCenterDetailsGetInstanceExecute(r ApiGameCenterDetailsGetInstanceRequest) (*GameCenterDetailResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GameCenterDetailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterDetailsApiService.GameCenterDetailsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsGameCenterAchievementReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievementReleases]", r.fieldsGameCenterAchievementReleases, "csv")
	}
	if r.fieldsGameCenterLeaderboardSetReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetReleases]", r.fieldsGameCenterLeaderboardSetReleases, "csv")
	}
	if r.fieldsGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSets]", r.fieldsGameCenterLeaderboardSets, "csv")
	}
	if r.fieldsGameCenterGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterGroups]", r.fieldsGameCenterGroups, "csv")
	}
	if r.fieldsGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboards]", r.fieldsGameCenterLeaderboards, "csv")
	}
	if r.fieldsGameCenterAchievements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAchievements]", r.fieldsGameCenterAchievements, "csv")
	}
	if r.fieldsGameCenterAppVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterAppVersions]", r.fieldsGameCenterAppVersions, "csv")
	}
	if r.fieldsGameCenterLeaderboardReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardReleases]", r.fieldsGameCenterLeaderboardReleases, "csv")
	}
	if r.limitAchievementReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[achievementReleases]", r.limitAchievementReleases, "")
	}
	if r.limitGameCenterAchievements != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterAchievements]", r.limitGameCenterAchievements, "")
	}
	if r.limitGameCenterAppVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterAppVersions]", r.limitGameCenterAppVersions, "")
	}
	if r.limitGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterLeaderboardSets]", r.limitGameCenterLeaderboardSets, "")
	}
	if r.limitGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[gameCenterLeaderboards]", r.limitGameCenterLeaderboards, "")
	}
	if r.limitLeaderboardReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[leaderboardReleases]", r.limitLeaderboardReleases, "")
	}
	if r.limitLeaderboardSetReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[leaderboardSetReleases]", r.limitLeaderboardSetReleases, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest struct {
	ctx                                 context.Context
	ApiService                          *GameCenterDetailsApiService
	id                                  string
	filterLive                          *[]string
	filterGameCenterLeaderboard         *[]string
	fieldsGameCenterDetails             *[]string
	fieldsGameCenterLeaderboards        *[]string
	fieldsGameCenterLeaderboardReleases *[]string
	limit                               *int32
	include                             *[]string
}

// filter by attribute &#39;live&#39;
func (r ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest) FilterLive(filterLive []string) ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest {
	r.filterLive = &filterLive
	return r
}

// filter by id(s) of related &#39;gameCenterLeaderboard&#39;
func (r ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest) FilterGameCenterLeaderboard(filterGameCenterLeaderboard []string) ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest {
	r.filterGameCenterLeaderboard = &filterGameCenterLeaderboard
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboards
func (r ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest) FieldsGameCenterLeaderboards(fieldsGameCenterLeaderboards []string) ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboards = &fieldsGameCenterLeaderboards
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardReleases
func (r ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest) FieldsGameCenterLeaderboardReleases(fieldsGameCenterLeaderboardReleases []string) ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardReleases = &fieldsGameCenterLeaderboardReleases
	return r
}

// maximum resources per page
func (r ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest) Include(include []string) ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest) Execute() (*GameCenterLeaderboardReleasesResponse, *http.Response, error) {
	return r.ApiService.GameCenterDetailsLeaderboardReleasesGetToManyRelatedExecute(r)
}

/*
GameCenterDetailsLeaderboardReleasesGetToManyRelated Method for GameCenterDetailsLeaderboardReleasesGetToManyRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest
*/
func (a *GameCenterDetailsApiService) GameCenterDetailsLeaderboardReleasesGetToManyRelated(ctx context.Context, id string) ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest {
	return ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return GameCenterLeaderboardReleasesResponse
func (a *GameCenterDetailsApiService) GameCenterDetailsLeaderboardReleasesGetToManyRelatedExecute(r ApiGameCenterDetailsLeaderboardReleasesGetToManyRelatedRequest) (*GameCenterLeaderboardReleasesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GameCenterLeaderboardReleasesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterDetailsApiService.GameCenterDetailsLeaderboardReleasesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}/leaderboardReleases"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterLive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[live]", r.filterLive, "csv")
	}
	if r.filterGameCenterLeaderboard != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterLeaderboard]", r.filterGameCenterLeaderboard, "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "csv")
	}
	if r.fieldsGameCenterLeaderboards != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboards]", r.fieldsGameCenterLeaderboards, "csv")
	}
	if r.fieldsGameCenterLeaderboardReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardReleases]", r.fieldsGameCenterLeaderboardReleases, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest struct {
	ctx                                    context.Context
	ApiService                             *GameCenterDetailsApiService
	id                                     string
	filterLive                             *[]string
	filterGameCenterLeaderboardSet         *[]string
	fieldsGameCenterLeaderboardSetReleases *[]string
	fieldsGameCenterLeaderboardSets        *[]string
	fieldsGameCenterDetails                *[]string
	limit                                  *int32
	include                                *[]string
}

// filter by attribute &#39;live&#39;
func (r ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest) FilterLive(filterLive []string) ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest {
	r.filterLive = &filterLive
	return r
}

// filter by id(s) of related &#39;gameCenterLeaderboardSet&#39;
func (r ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest) FilterGameCenterLeaderboardSet(filterGameCenterLeaderboardSet []string) ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest {
	r.filterGameCenterLeaderboardSet = &filterGameCenterLeaderboardSet
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSetReleases
func (r ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest) FieldsGameCenterLeaderboardSetReleases(fieldsGameCenterLeaderboardSetReleases []string) ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardSetReleases = &fieldsGameCenterLeaderboardSetReleases
	return r
}

// the fields to include for returned resources of type gameCenterLeaderboardSets
func (r ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest) FieldsGameCenterLeaderboardSets(fieldsGameCenterLeaderboardSets []string) ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest {
	r.fieldsGameCenterLeaderboardSets = &fieldsGameCenterLeaderboardSets
	return r
}

// the fields to include for returned resources of type gameCenterDetails
func (r ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest) FieldsGameCenterDetails(fieldsGameCenterDetails []string) ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest {
	r.fieldsGameCenterDetails = &fieldsGameCenterDetails
	return r
}

// maximum resources per page
func (r ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest) Limit(limit int32) ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest) Include(include []string) ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest) Execute() (*GameCenterLeaderboardSetReleasesResponse, *http.Response, error) {
	return r.ApiService.GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedExecute(r)
}

/*
GameCenterDetailsLeaderboardSetReleasesGetToManyRelated Method for GameCenterDetailsLeaderboardSetReleasesGetToManyRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest
*/
func (a *GameCenterDetailsApiService) GameCenterDetailsLeaderboardSetReleasesGetToManyRelated(ctx context.Context, id string) ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest {
	return ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return GameCenterLeaderboardSetReleasesResponse
func (a *GameCenterDetailsApiService) GameCenterDetailsLeaderboardSetReleasesGetToManyRelatedExecute(r ApiGameCenterDetailsLeaderboardSetReleasesGetToManyRelatedRequest) (*GameCenterLeaderboardSetReleasesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GameCenterLeaderboardSetReleasesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterDetailsApiService.GameCenterDetailsLeaderboardSetReleasesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}/leaderboardSetReleases"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterLive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[live]", r.filterLive, "csv")
	}
	if r.filterGameCenterLeaderboardSet != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterLeaderboardSet]", r.filterGameCenterLeaderboardSet, "csv")
	}
	if r.fieldsGameCenterLeaderboardSetReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSetReleases]", r.fieldsGameCenterLeaderboardSetReleases, "csv")
	}
	if r.fieldsGameCenterLeaderboardSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterLeaderboardSets]", r.fieldsGameCenterLeaderboardSets, "csv")
	}
	if r.fieldsGameCenterDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[gameCenterDetails]", r.fieldsGameCenterDetails, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterDetailsUpdateInstanceRequest struct {
	ctx                           context.Context
	ApiService                    *GameCenterDetailsApiService
	id                            string
	gameCenterDetailUpdateRequest *GameCenterDetailUpdateRequest
}

// GameCenterDetail representation
func (r ApiGameCenterDetailsUpdateInstanceRequest) GameCenterDetailUpdateRequest(gameCenterDetailUpdateRequest GameCenterDetailUpdateRequest) ApiGameCenterDetailsUpdateInstanceRequest {
	r.gameCenterDetailUpdateRequest = &gameCenterDetailUpdateRequest
	return r
}

func (r ApiGameCenterDetailsUpdateInstanceRequest) Execute() (*GameCenterDetailResponse, *http.Response, error) {
	return r.ApiService.GameCenterDetailsUpdateInstanceExecute(r)
}

/*
GameCenterDetailsUpdateInstance Method for GameCenterDetailsUpdateInstance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiGameCenterDetailsUpdateInstanceRequest
*/
func (a *GameCenterDetailsApiService) GameCenterDetailsUpdateInstance(ctx context.Context, id string) ApiGameCenterDetailsUpdateInstanceRequest {
	return ApiGameCenterDetailsUpdateInstanceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return GameCenterDetailResponse
func (a *GameCenterDetailsApiService) GameCenterDetailsUpdateInstanceExecute(r ApiGameCenterDetailsUpdateInstanceRequest) (*GameCenterDetailResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *GameCenterDetailResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "GameCenterDetailsApiService.GameCenterDetailsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.gameCenterDetailUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("gameCenterDetailUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.gameCenterDetailUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
