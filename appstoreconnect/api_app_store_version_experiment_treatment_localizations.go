/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// AppStoreVersionExperimentTreatmentLocalizationsApiService AppStoreVersionExperimentTreatmentLocalizationsApi service
type AppStoreVersionExperimentTreatmentLocalizationsApiService service

type ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest struct {
	ctx                                                   context.Context
	ApiService                                            *AppStoreVersionExperimentTreatmentLocalizationsApiService
	id                                                    string
	filterPreviewType                                     *[]string
	filterAppCustomProductPageLocalization                *[]string
	filterAppStoreVersionLocalization                     *[]string
	fieldsAppCustomProductPageLocalizations               *[]string
	fieldsAppStoreVersionExperimentTreatmentLocalizations *[]string
	fieldsAppPreviews                                     *[]string
	fieldsAppPreviewSets                                  *[]string
	fieldsAppStoreVersionLocalizations                    *[]string
	limit                                                 *int32
	limitAppPreviews                                      *int32
	include                                               *[]string
}

// filter by attribute &#39;previewType&#39;
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest) FilterPreviewType(filterPreviewType []string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.filterPreviewType = &filterPreviewType
	return r
}

// filter by id(s) of related &#39;appCustomProductPageLocalization&#39;
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest) FilterAppCustomProductPageLocalization(filterAppCustomProductPageLocalization []string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.filterAppCustomProductPageLocalization = &filterAppCustomProductPageLocalization
	return r
}

// filter by id(s) of related &#39;appStoreVersionLocalization&#39;
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest) FilterAppStoreVersionLocalization(filterAppStoreVersionLocalization []string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.filterAppStoreVersionLocalization = &filterAppStoreVersionLocalization
	return r
}

// the fields to include for returned resources of type appCustomProductPageLocalizations
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest) FieldsAppCustomProductPageLocalizations(fieldsAppCustomProductPageLocalizations []string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.fieldsAppCustomProductPageLocalizations = &fieldsAppCustomProductPageLocalizations
	return r
}

// the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest) FieldsAppStoreVersionExperimentTreatmentLocalizations(fieldsAppStoreVersionExperimentTreatmentLocalizations []string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionExperimentTreatmentLocalizations = &fieldsAppStoreVersionExperimentTreatmentLocalizations
	return r
}

// the fields to include for returned resources of type appPreviews
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest) FieldsAppPreviews(fieldsAppPreviews []string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.fieldsAppPreviews = &fieldsAppPreviews
	return r
}

// the fields to include for returned resources of type appPreviewSets
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest) FieldsAppPreviewSets(fieldsAppPreviewSets []string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.fieldsAppPreviewSets = &fieldsAppPreviewSets
	return r
}

// the fields to include for returned resources of type appStoreVersionLocalizations
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest) FieldsAppStoreVersionLocalizations(fieldsAppStoreVersionLocalizations []string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionLocalizations = &fieldsAppStoreVersionLocalizations
	return r
}

// maximum resources per page
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest) Limit(limit int32) ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// maximum number of related appPreviews returned (when they are included)
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest) LimitAppPreviews(limitAppPreviews int32) ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.limitAppPreviews = &limitAppPreviews
	return r
}

// comma-separated list of relationships to include
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest) Include(include []string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest) Execute() (*AppPreviewSetsResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedExecute(r)
}

/*
AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated Method for AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest
*/
func (a *AppStoreVersionExperimentTreatmentLocalizationsApiService) AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated(ctx context.Context, id string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest {
	return ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return AppPreviewSetsResponse
func (a *AppStoreVersionExperimentTreatmentLocalizationsApiService) AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedExecute(r ApiAppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelatedRequest) (*AppPreviewSetsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppPreviewSetsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionExperimentTreatmentLocalizationsApiService.AppStoreVersionExperimentTreatmentLocalizationsAppPreviewSetsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appPreviewSets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterPreviewType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[previewType]", r.filterPreviewType, "csv")
	}
	if r.filterAppCustomProductPageLocalization != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[appCustomProductPageLocalization]", r.filterAppCustomProductPageLocalization, "csv")
	}
	if r.filterAppStoreVersionLocalization != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[appStoreVersionLocalization]", r.filterAppStoreVersionLocalization, "csv")
	}
	if r.fieldsAppCustomProductPageLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appCustomProductPageLocalizations]", r.fieldsAppCustomProductPageLocalizations, "csv")
	}
	if r.fieldsAppStoreVersionExperimentTreatmentLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperimentTreatmentLocalizations]", r.fieldsAppStoreVersionExperimentTreatmentLocalizations, "csv")
	}
	if r.fieldsAppPreviews != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appPreviews]", r.fieldsAppPreviews, "csv")
	}
	if r.fieldsAppPreviewSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appPreviewSets]", r.fieldsAppPreviewSets, "csv")
	}
	if r.fieldsAppStoreVersionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionLocalizations]", r.fieldsAppStoreVersionLocalizations, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.limitAppPreviews != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appPreviews]", r.limitAppPreviews, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest struct {
	ctx                                                   context.Context
	ApiService                                            *AppStoreVersionExperimentTreatmentLocalizationsApiService
	id                                                    string
	filterScreenshotDisplayType                           *[]string
	filterAppCustomProductPageLocalization                *[]string
	filterAppStoreVersionLocalization                     *[]string
	fieldsAppScreenshotSets                               *[]string
	fieldsAppCustomProductPageLocalizations               *[]string
	fieldsAppStoreVersionExperimentTreatmentLocalizations *[]string
	fieldsAppScreenshots                                  *[]string
	fieldsAppStoreVersionLocalizations                    *[]string
	limit                                                 *int32
	limitAppScreenshots                                   *int32
	include                                               *[]string
}

// filter by attribute &#39;screenshotDisplayType&#39;
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FilterScreenshotDisplayType(filterScreenshotDisplayType []string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.filterScreenshotDisplayType = &filterScreenshotDisplayType
	return r
}

// filter by id(s) of related &#39;appCustomProductPageLocalization&#39;
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FilterAppCustomProductPageLocalization(filterAppCustomProductPageLocalization []string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.filterAppCustomProductPageLocalization = &filterAppCustomProductPageLocalization
	return r
}

// filter by id(s) of related &#39;appStoreVersionLocalization&#39;
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FilterAppStoreVersionLocalization(filterAppStoreVersionLocalization []string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.filterAppStoreVersionLocalization = &filterAppStoreVersionLocalization
	return r
}

// the fields to include for returned resources of type appScreenshotSets
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FieldsAppScreenshotSets(fieldsAppScreenshotSets []string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.fieldsAppScreenshotSets = &fieldsAppScreenshotSets
	return r
}

// the fields to include for returned resources of type appCustomProductPageLocalizations
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FieldsAppCustomProductPageLocalizations(fieldsAppCustomProductPageLocalizations []string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.fieldsAppCustomProductPageLocalizations = &fieldsAppCustomProductPageLocalizations
	return r
}

// the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FieldsAppStoreVersionExperimentTreatmentLocalizations(fieldsAppStoreVersionExperimentTreatmentLocalizations []string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionExperimentTreatmentLocalizations = &fieldsAppStoreVersionExperimentTreatmentLocalizations
	return r
}

// the fields to include for returned resources of type appScreenshots
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FieldsAppScreenshots(fieldsAppScreenshots []string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.fieldsAppScreenshots = &fieldsAppScreenshots
	return r
}

// the fields to include for returned resources of type appStoreVersionLocalizations
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest) FieldsAppStoreVersionLocalizations(fieldsAppStoreVersionLocalizations []string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.fieldsAppStoreVersionLocalizations = &fieldsAppStoreVersionLocalizations
	return r
}

// maximum resources per page
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest) Limit(limit int32) ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// maximum number of related appScreenshots returned (when they are included)
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest) LimitAppScreenshots(limitAppScreenshots int32) ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.limitAppScreenshots = &limitAppScreenshots
	return r
}

// comma-separated list of relationships to include
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest) Include(include []string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest) Execute() (*AppScreenshotSetsResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedExecute(r)
}

/*
AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated Method for AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest
*/
func (a *AppStoreVersionExperimentTreatmentLocalizationsApiService) AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated(ctx context.Context, id string) ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest {
	return ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return AppScreenshotSetsResponse
func (a *AppStoreVersionExperimentTreatmentLocalizationsApiService) AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedExecute(r ApiAppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelatedRequest) (*AppScreenshotSetsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppScreenshotSetsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionExperimentTreatmentLocalizationsApiService.AppStoreVersionExperimentTreatmentLocalizationsAppScreenshotSetsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersionExperimentTreatmentLocalizations/{id}/appScreenshotSets"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterScreenshotDisplayType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[screenshotDisplayType]", r.filterScreenshotDisplayType, "csv")
	}
	if r.filterAppCustomProductPageLocalization != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[appCustomProductPageLocalization]", r.filterAppCustomProductPageLocalization, "csv")
	}
	if r.filterAppStoreVersionLocalization != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[appStoreVersionLocalization]", r.filterAppStoreVersionLocalization, "csv")
	}
	if r.fieldsAppScreenshotSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appScreenshotSets]", r.fieldsAppScreenshotSets, "csv")
	}
	if r.fieldsAppCustomProductPageLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appCustomProductPageLocalizations]", r.fieldsAppCustomProductPageLocalizations, "csv")
	}
	if r.fieldsAppStoreVersionExperimentTreatmentLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperimentTreatmentLocalizations]", r.fieldsAppStoreVersionExperimentTreatmentLocalizations, "csv")
	}
	if r.fieldsAppScreenshots != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appScreenshots]", r.fieldsAppScreenshots, "csv")
	}
	if r.fieldsAppStoreVersionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionLocalizations]", r.fieldsAppStoreVersionLocalizations, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.limitAppScreenshots != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appScreenshots]", r.limitAppScreenshots, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionExperimentTreatmentLocalizationsCreateInstanceRequest struct {
	ctx                                                         context.Context
	ApiService                                                  *AppStoreVersionExperimentTreatmentLocalizationsApiService
	appStoreVersionExperimentTreatmentLocalizationCreateRequest *AppStoreVersionExperimentTreatmentLocalizationCreateRequest
}

// AppStoreVersionExperimentTreatmentLocalization representation
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsCreateInstanceRequest) AppStoreVersionExperimentTreatmentLocalizationCreateRequest(appStoreVersionExperimentTreatmentLocalizationCreateRequest AppStoreVersionExperimentTreatmentLocalizationCreateRequest) ApiAppStoreVersionExperimentTreatmentLocalizationsCreateInstanceRequest {
	r.appStoreVersionExperimentTreatmentLocalizationCreateRequest = &appStoreVersionExperimentTreatmentLocalizationCreateRequest
	return r
}

func (r ApiAppStoreVersionExperimentTreatmentLocalizationsCreateInstanceRequest) Execute() (*AppStoreVersionExperimentTreatmentLocalizationResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceExecute(r)
}

/*
AppStoreVersionExperimentTreatmentLocalizationsCreateInstance Method for AppStoreVersionExperimentTreatmentLocalizationsCreateInstance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiAppStoreVersionExperimentTreatmentLocalizationsCreateInstanceRequest
*/
func (a *AppStoreVersionExperimentTreatmentLocalizationsApiService) AppStoreVersionExperimentTreatmentLocalizationsCreateInstance(ctx context.Context) ApiAppStoreVersionExperimentTreatmentLocalizationsCreateInstanceRequest {
	return ApiAppStoreVersionExperimentTreatmentLocalizationsCreateInstanceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AppStoreVersionExperimentTreatmentLocalizationResponse
func (a *AppStoreVersionExperimentTreatmentLocalizationsApiService) AppStoreVersionExperimentTreatmentLocalizationsCreateInstanceExecute(r ApiAppStoreVersionExperimentTreatmentLocalizationsCreateInstanceRequest) (*AppStoreVersionExperimentTreatmentLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppStoreVersionExperimentTreatmentLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionExperimentTreatmentLocalizationsApiService.AppStoreVersionExperimentTreatmentLocalizationsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersionExperimentTreatmentLocalizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.appStoreVersionExperimentTreatmentLocalizationCreateRequest == nil {
		return localVarReturnValue, nil, reportError("appStoreVersionExperimentTreatmentLocalizationCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appStoreVersionExperimentTreatmentLocalizationCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceRequest struct {
	ctx        context.Context
	ApiService *AppStoreVersionExperimentTreatmentLocalizationsApiService
	id         string
}

func (r ApiAppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceExecute(r)
}

/*
AppStoreVersionExperimentTreatmentLocalizationsDeleteInstance Method for AppStoreVersionExperimentTreatmentLocalizationsDeleteInstance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiAppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceRequest
*/
func (a *AppStoreVersionExperimentTreatmentLocalizationsApiService) AppStoreVersionExperimentTreatmentLocalizationsDeleteInstance(ctx context.Context, id string) ApiAppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceRequest {
	return ApiAppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *AppStoreVersionExperimentTreatmentLocalizationsApiService) AppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceExecute(r ApiAppStoreVersionExperimentTreatmentLocalizationsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionExperimentTreatmentLocalizationsApiService.AppStoreVersionExperimentTreatmentLocalizationsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersionExperimentTreatmentLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest struct {
	ctx                                                   context.Context
	ApiService                                            *AppStoreVersionExperimentTreatmentLocalizationsApiService
	id                                                    string
	fieldsAppStoreVersionExperimentTreatmentLocalizations *[]string
	include                                               *[]string
	fieldsAppScreenshotSets                               *[]string
	fieldsAppPreviewSets                                  *[]string
	limitAppPreviewSets                                   *int32
	limitAppScreenshotSets                                *int32
}

// the fields to include for returned resources of type appStoreVersionExperimentTreatmentLocalizations
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest) FieldsAppStoreVersionExperimentTreatmentLocalizations(fieldsAppStoreVersionExperimentTreatmentLocalizations []string) ApiAppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest {
	r.fieldsAppStoreVersionExperimentTreatmentLocalizations = &fieldsAppStoreVersionExperimentTreatmentLocalizations
	return r
}

// comma-separated list of relationships to include
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest) Include(include []string) ApiAppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type appScreenshotSets
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest) FieldsAppScreenshotSets(fieldsAppScreenshotSets []string) ApiAppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest {
	r.fieldsAppScreenshotSets = &fieldsAppScreenshotSets
	return r
}

// the fields to include for returned resources of type appPreviewSets
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest) FieldsAppPreviewSets(fieldsAppPreviewSets []string) ApiAppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest {
	r.fieldsAppPreviewSets = &fieldsAppPreviewSets
	return r
}

// maximum number of related appPreviewSets returned (when they are included)
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest) LimitAppPreviewSets(limitAppPreviewSets int32) ApiAppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest {
	r.limitAppPreviewSets = &limitAppPreviewSets
	return r
}

// maximum number of related appScreenshotSets returned (when they are included)
func (r ApiAppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest) LimitAppScreenshotSets(limitAppScreenshotSets int32) ApiAppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest {
	r.limitAppScreenshotSets = &limitAppScreenshotSets
	return r
}

func (r ApiAppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest) Execute() (*AppStoreVersionExperimentTreatmentLocalizationResponse, *http.Response, error) {
	return r.ApiService.AppStoreVersionExperimentTreatmentLocalizationsGetInstanceExecute(r)
}

/*
AppStoreVersionExperimentTreatmentLocalizationsGetInstance Method for AppStoreVersionExperimentTreatmentLocalizationsGetInstance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiAppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest
*/
func (a *AppStoreVersionExperimentTreatmentLocalizationsApiService) AppStoreVersionExperimentTreatmentLocalizationsGetInstance(ctx context.Context, id string) ApiAppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest {
	return ApiAppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return AppStoreVersionExperimentTreatmentLocalizationResponse
func (a *AppStoreVersionExperimentTreatmentLocalizationsApiService) AppStoreVersionExperimentTreatmentLocalizationsGetInstanceExecute(r ApiAppStoreVersionExperimentTreatmentLocalizationsGetInstanceRequest) (*AppStoreVersionExperimentTreatmentLocalizationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppStoreVersionExperimentTreatmentLocalizationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppStoreVersionExperimentTreatmentLocalizationsApiService.AppStoreVersionExperimentTreatmentLocalizationsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/appStoreVersionExperimentTreatmentLocalizations/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppStoreVersionExperimentTreatmentLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperimentTreatmentLocalizations]", r.fieldsAppStoreVersionExperimentTreatmentLocalizations, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsAppScreenshotSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appScreenshotSets]", r.fieldsAppScreenshotSets, "csv")
	}
	if r.fieldsAppPreviewSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appPreviewSets]", r.fieldsAppPreviewSets, "csv")
	}
	if r.limitAppPreviewSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appPreviewSets]", r.limitAppPreviewSets, "")
	}
	if r.limitAppScreenshotSets != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appScreenshotSets]", r.limitAppScreenshotSets, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
