/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// BuildsApiService BuildsApi service
type BuildsApiService service

type ApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest struct {
	ctx                             context.Context
	ApiService                      *BuildsApiService
	id                              string
	fieldsAppEncryptionDeclarations *[]string
}

// the fields to include for returned resources of type appEncryptionDeclarations
func (r ApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest) FieldsAppEncryptionDeclarations(fieldsAppEncryptionDeclarations []string) ApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest {
	r.fieldsAppEncryptionDeclarations = &fieldsAppEncryptionDeclarations
	return r
}

func (r ApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest) Execute() (*AppEncryptionDeclarationWithoutIncludesResponse, *http.Response, error) {
	return r.ApiService.BuildsAppEncryptionDeclarationGetToOneRelatedExecute(r)
}

/*
BuildsAppEncryptionDeclarationGetToOneRelated Method for BuildsAppEncryptionDeclarationGetToOneRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest
*/
func (a *BuildsApiService) BuildsAppEncryptionDeclarationGetToOneRelated(ctx context.Context, id string) ApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest {
	return ApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return AppEncryptionDeclarationWithoutIncludesResponse
func (a *BuildsApiService) BuildsAppEncryptionDeclarationGetToOneRelatedExecute(r ApiBuildsAppEncryptionDeclarationGetToOneRelatedRequest) (*AppEncryptionDeclarationWithoutIncludesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppEncryptionDeclarationWithoutIncludesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsAppEncryptionDeclarationGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/appEncryptionDeclaration"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppEncryptionDeclarations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEncryptionDeclarations]", r.fieldsAppEncryptionDeclarations, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsAppEncryptionDeclarationGetToOneRelationshipRequest struct {
	ctx        context.Context
	ApiService *BuildsApiService
	id         string
}

func (r ApiBuildsAppEncryptionDeclarationGetToOneRelationshipRequest) Execute() (*BuildAppEncryptionDeclarationLinkageResponse, *http.Response, error) {
	return r.ApiService.BuildsAppEncryptionDeclarationGetToOneRelationshipExecute(r)
}

/*
BuildsAppEncryptionDeclarationGetToOneRelationship Method for BuildsAppEncryptionDeclarationGetToOneRelationship

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsAppEncryptionDeclarationGetToOneRelationshipRequest
*/
func (a *BuildsApiService) BuildsAppEncryptionDeclarationGetToOneRelationship(ctx context.Context, id string) ApiBuildsAppEncryptionDeclarationGetToOneRelationshipRequest {
	return ApiBuildsAppEncryptionDeclarationGetToOneRelationshipRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BuildAppEncryptionDeclarationLinkageResponse
func (a *BuildsApiService) BuildsAppEncryptionDeclarationGetToOneRelationshipExecute(r ApiBuildsAppEncryptionDeclarationGetToOneRelationshipRequest) (*BuildAppEncryptionDeclarationLinkageResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BuildAppEncryptionDeclarationLinkageResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsAppEncryptionDeclarationGetToOneRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/appEncryptionDeclaration"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest struct {
	ctx                                         context.Context
	ApiService                                  *BuildsApiService
	id                                          string
	buildAppEncryptionDeclarationLinkageRequest *BuildAppEncryptionDeclarationLinkageRequest
}

// Related linkage
func (r ApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest) BuildAppEncryptionDeclarationLinkageRequest(buildAppEncryptionDeclarationLinkageRequest BuildAppEncryptionDeclarationLinkageRequest) ApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest {
	r.buildAppEncryptionDeclarationLinkageRequest = &buildAppEncryptionDeclarationLinkageRequest
	return r
}

func (r ApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.BuildsAppEncryptionDeclarationUpdateToOneRelationshipExecute(r)
}

/*
BuildsAppEncryptionDeclarationUpdateToOneRelationship Method for BuildsAppEncryptionDeclarationUpdateToOneRelationship

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest
*/
func (a *BuildsApiService) BuildsAppEncryptionDeclarationUpdateToOneRelationship(ctx context.Context, id string) ApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest {
	return ApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *BuildsApiService) BuildsAppEncryptionDeclarationUpdateToOneRelationshipExecute(r ApiBuildsAppEncryptionDeclarationUpdateToOneRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPatch
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsAppEncryptionDeclarationUpdateToOneRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/appEncryptionDeclaration"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.buildAppEncryptionDeclarationLinkageRequest == nil {
		return nil, reportError("buildAppEncryptionDeclarationLinkageRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildAppEncryptionDeclarationLinkageRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiBuildsAppGetToOneRelatedRequest struct {
	ctx        context.Context
	ApiService *BuildsApiService
	id         string
	fieldsApps *[]string
}

// the fields to include for returned resources of type apps
func (r ApiBuildsAppGetToOneRelatedRequest) FieldsApps(fieldsApps []string) ApiBuildsAppGetToOneRelatedRequest {
	r.fieldsApps = &fieldsApps
	return r
}

func (r ApiBuildsAppGetToOneRelatedRequest) Execute() (*AppWithoutIncludesResponse, *http.Response, error) {
	return r.ApiService.BuildsAppGetToOneRelatedExecute(r)
}

/*
BuildsAppGetToOneRelated Method for BuildsAppGetToOneRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsAppGetToOneRelatedRequest
*/
func (a *BuildsApiService) BuildsAppGetToOneRelated(ctx context.Context, id string) ApiBuildsAppGetToOneRelatedRequest {
	return ApiBuildsAppGetToOneRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return AppWithoutIncludesResponse
func (a *BuildsApiService) BuildsAppGetToOneRelatedExecute(r ApiBuildsAppGetToOneRelatedRequest) (*AppWithoutIncludesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppWithoutIncludesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsAppGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/app"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsAppStoreVersionGetToOneRelatedRequest struct {
	ctx                                 context.Context
	ApiService                          *BuildsApiService
	id                                  string
	fieldsAppStoreVersionExperiments    *[]string
	fieldsAgeRatingDeclarations         *[]string
	fieldsAppStoreVersionSubmissions    *[]string
	fieldsAppStoreReviewDetails         *[]string
	fieldsAppStoreVersions              *[]string
	fieldsApps                          *[]string
	fieldsRoutingAppCoverages           *[]string
	fieldsAppClipDefaultExperiences     *[]string
	fieldsAppStoreVersionPhasedReleases *[]string
	fieldsBuilds                        *[]string
	fieldsAppStoreVersionLocalizations  *[]string
	limitAppStoreVersionLocalizations   *int32
	limitAppStoreVersionExperiments     *int32
	limitAppStoreVersionExperimentsV2   *int32
	include                             *[]string
}

// the fields to include for returned resources of type appStoreVersionExperiments
func (r ApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsAppStoreVersionExperiments(fieldsAppStoreVersionExperiments []string) ApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppStoreVersionExperiments = &fieldsAppStoreVersionExperiments
	return r
}

// the fields to include for returned resources of type ageRatingDeclarations
func (r ApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsAgeRatingDeclarations(fieldsAgeRatingDeclarations []string) ApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAgeRatingDeclarations = &fieldsAgeRatingDeclarations
	return r
}

// the fields to include for returned resources of type appStoreVersionSubmissions
func (r ApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsAppStoreVersionSubmissions(fieldsAppStoreVersionSubmissions []string) ApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppStoreVersionSubmissions = &fieldsAppStoreVersionSubmissions
	return r
}

// the fields to include for returned resources of type appStoreReviewDetails
func (r ApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsAppStoreReviewDetails(fieldsAppStoreReviewDetails []string) ApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppStoreReviewDetails = &fieldsAppStoreReviewDetails
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r ApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) ApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type apps
func (r ApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsApps(fieldsApps []string) ApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// the fields to include for returned resources of type routingAppCoverages
func (r ApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsRoutingAppCoverages(fieldsRoutingAppCoverages []string) ApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsRoutingAppCoverages = &fieldsRoutingAppCoverages
	return r
}

// the fields to include for returned resources of type appClipDefaultExperiences
func (r ApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsAppClipDefaultExperiences(fieldsAppClipDefaultExperiences []string) ApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppClipDefaultExperiences = &fieldsAppClipDefaultExperiences
	return r
}

// the fields to include for returned resources of type appStoreVersionPhasedReleases
func (r ApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsAppStoreVersionPhasedReleases(fieldsAppStoreVersionPhasedReleases []string) ApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppStoreVersionPhasedReleases = &fieldsAppStoreVersionPhasedReleases
	return r
}

// the fields to include for returned resources of type builds
func (r ApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsBuilds(fieldsBuilds []string) ApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// the fields to include for returned resources of type appStoreVersionLocalizations
func (r ApiBuildsAppStoreVersionGetToOneRelatedRequest) FieldsAppStoreVersionLocalizations(fieldsAppStoreVersionLocalizations []string) ApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.fieldsAppStoreVersionLocalizations = &fieldsAppStoreVersionLocalizations
	return r
}

// maximum number of related appStoreVersionLocalizations returned (when they are included)
func (r ApiBuildsAppStoreVersionGetToOneRelatedRequest) LimitAppStoreVersionLocalizations(limitAppStoreVersionLocalizations int32) ApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.limitAppStoreVersionLocalizations = &limitAppStoreVersionLocalizations
	return r
}

// maximum number of related appStoreVersionExperiments returned (when they are included)
// Deprecated
func (r ApiBuildsAppStoreVersionGetToOneRelatedRequest) LimitAppStoreVersionExperiments(limitAppStoreVersionExperiments int32) ApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.limitAppStoreVersionExperiments = &limitAppStoreVersionExperiments
	return r
}

// maximum number of related appStoreVersionExperimentsV2 returned (when they are included)
func (r ApiBuildsAppStoreVersionGetToOneRelatedRequest) LimitAppStoreVersionExperimentsV2(limitAppStoreVersionExperimentsV2 int32) ApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.limitAppStoreVersionExperimentsV2 = &limitAppStoreVersionExperimentsV2
	return r
}

// comma-separated list of relationships to include
func (r ApiBuildsAppStoreVersionGetToOneRelatedRequest) Include(include []string) ApiBuildsAppStoreVersionGetToOneRelatedRequest {
	r.include = &include
	return r
}

func (r ApiBuildsAppStoreVersionGetToOneRelatedRequest) Execute() (*AppStoreVersionResponse, *http.Response, error) {
	return r.ApiService.BuildsAppStoreVersionGetToOneRelatedExecute(r)
}

/*
BuildsAppStoreVersionGetToOneRelated Method for BuildsAppStoreVersionGetToOneRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsAppStoreVersionGetToOneRelatedRequest
*/
func (a *BuildsApiService) BuildsAppStoreVersionGetToOneRelated(ctx context.Context, id string) ApiBuildsAppStoreVersionGetToOneRelatedRequest {
	return ApiBuildsAppStoreVersionGetToOneRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return AppStoreVersionResponse
func (a *BuildsApiService) BuildsAppStoreVersionGetToOneRelatedExecute(r ApiBuildsAppStoreVersionGetToOneRelatedRequest) (*AppStoreVersionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppStoreVersionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsAppStoreVersionGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/appStoreVersion"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsAppStoreVersionExperiments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionExperiments]", r.fieldsAppStoreVersionExperiments, "csv")
	}
	if r.fieldsAgeRatingDeclarations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[ageRatingDeclarations]", r.fieldsAgeRatingDeclarations, "csv")
	}
	if r.fieldsAppStoreVersionSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionSubmissions]", r.fieldsAppStoreVersionSubmissions, "csv")
	}
	if r.fieldsAppStoreReviewDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreReviewDetails]", r.fieldsAppStoreReviewDetails, "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	if r.fieldsRoutingAppCoverages != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[routingAppCoverages]", r.fieldsRoutingAppCoverages, "csv")
	}
	if r.fieldsAppClipDefaultExperiences != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appClipDefaultExperiences]", r.fieldsAppClipDefaultExperiences, "csv")
	}
	if r.fieldsAppStoreVersionPhasedReleases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionPhasedReleases]", r.fieldsAppStoreVersionPhasedReleases, "csv")
	}
	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "csv")
	}
	if r.fieldsAppStoreVersionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersionLocalizations]", r.fieldsAppStoreVersionLocalizations, "csv")
	}
	if r.limitAppStoreVersionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreVersionLocalizations]", r.limitAppStoreVersionLocalizations, "")
	}
	if r.limitAppStoreVersionExperiments != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreVersionExperiments]", r.limitAppStoreVersionExperiments, "")
	}
	if r.limitAppStoreVersionExperimentsV2 != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[appStoreVersionExperimentsV2]", r.limitAppStoreVersionExperimentsV2, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest struct {
	ctx                            context.Context
	ApiService                     *BuildsApiService
	id                             string
	fieldsBetaAppReviewSubmissions *[]string
}

// the fields to include for returned resources of type betaAppReviewSubmissions
func (r ApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest) FieldsBetaAppReviewSubmissions(fieldsBetaAppReviewSubmissions []string) ApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest {
	r.fieldsBetaAppReviewSubmissions = &fieldsBetaAppReviewSubmissions
	return r
}

func (r ApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest) Execute() (*BetaAppReviewSubmissionWithoutIncludesResponse, *http.Response, error) {
	return r.ApiService.BuildsBetaAppReviewSubmissionGetToOneRelatedExecute(r)
}

/*
BuildsBetaAppReviewSubmissionGetToOneRelated Method for BuildsBetaAppReviewSubmissionGetToOneRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest
*/
func (a *BuildsApiService) BuildsBetaAppReviewSubmissionGetToOneRelated(ctx context.Context, id string) ApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest {
	return ApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BetaAppReviewSubmissionWithoutIncludesResponse
func (a *BuildsApiService) BuildsBetaAppReviewSubmissionGetToOneRelatedExecute(r ApiBuildsBetaAppReviewSubmissionGetToOneRelatedRequest) (*BetaAppReviewSubmissionWithoutIncludesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BetaAppReviewSubmissionWithoutIncludesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsBetaAppReviewSubmissionGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/betaAppReviewSubmission"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBetaAppReviewSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaAppReviewSubmissions]", r.fieldsBetaAppReviewSubmissions, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest struct {
	ctx                          context.Context
	ApiService                   *BuildsApiService
	id                           string
	fieldsBetaBuildLocalizations *[]string
	limit                        *int32
}

// the fields to include for returned resources of type betaBuildLocalizations
func (r ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest) FieldsBetaBuildLocalizations(fieldsBetaBuildLocalizations []string) ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest {
	r.fieldsBetaBuildLocalizations = &fieldsBetaBuildLocalizations
	return r
}

// maximum resources per page
func (r ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest) Limit(limit int32) ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest) Execute() (*BetaBuildLocalizationsWithoutIncludesResponse, *http.Response, error) {
	return r.ApiService.BuildsBetaBuildLocalizationsGetToManyRelatedExecute(r)
}

/*
BuildsBetaBuildLocalizationsGetToManyRelated Method for BuildsBetaBuildLocalizationsGetToManyRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest
*/
func (a *BuildsApiService) BuildsBetaBuildLocalizationsGetToManyRelated(ctx context.Context, id string) ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest {
	return ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BetaBuildLocalizationsWithoutIncludesResponse
func (a *BuildsApiService) BuildsBetaBuildLocalizationsGetToManyRelatedExecute(r ApiBuildsBetaBuildLocalizationsGetToManyRelatedRequest) (*BetaBuildLocalizationsWithoutIncludesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BetaBuildLocalizationsWithoutIncludesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsBetaBuildLocalizationsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/betaBuildLocalizations"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBetaBuildLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaBuildLocalizations]", r.fieldsBetaBuildLocalizations, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsBetaGroupsCreateToManyRelationshipRequest struct {
	ctx                            context.Context
	ApiService                     *BuildsApiService
	id                             string
	buildBetaGroupsLinkagesRequest *BuildBetaGroupsLinkagesRequest
}

// List of related linkages
func (r ApiBuildsBetaGroupsCreateToManyRelationshipRequest) BuildBetaGroupsLinkagesRequest(buildBetaGroupsLinkagesRequest BuildBetaGroupsLinkagesRequest) ApiBuildsBetaGroupsCreateToManyRelationshipRequest {
	r.buildBetaGroupsLinkagesRequest = &buildBetaGroupsLinkagesRequest
	return r
}

func (r ApiBuildsBetaGroupsCreateToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.BuildsBetaGroupsCreateToManyRelationshipExecute(r)
}

/*
BuildsBetaGroupsCreateToManyRelationship Method for BuildsBetaGroupsCreateToManyRelationship

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsBetaGroupsCreateToManyRelationshipRequest
*/
func (a *BuildsApiService) BuildsBetaGroupsCreateToManyRelationship(ctx context.Context, id string) ApiBuildsBetaGroupsCreateToManyRelationshipRequest {
	return ApiBuildsBetaGroupsCreateToManyRelationshipRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *BuildsApiService) BuildsBetaGroupsCreateToManyRelationshipExecute(r ApiBuildsBetaGroupsCreateToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsBetaGroupsCreateToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/betaGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.buildBetaGroupsLinkagesRequest == nil {
		return nil, reportError("buildBetaGroupsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildBetaGroupsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiBuildsBetaGroupsDeleteToManyRelationshipRequest struct {
	ctx                            context.Context
	ApiService                     *BuildsApiService
	id                             string
	buildBetaGroupsLinkagesRequest *BuildBetaGroupsLinkagesRequest
}

// List of related linkages
func (r ApiBuildsBetaGroupsDeleteToManyRelationshipRequest) BuildBetaGroupsLinkagesRequest(buildBetaGroupsLinkagesRequest BuildBetaGroupsLinkagesRequest) ApiBuildsBetaGroupsDeleteToManyRelationshipRequest {
	r.buildBetaGroupsLinkagesRequest = &buildBetaGroupsLinkagesRequest
	return r
}

func (r ApiBuildsBetaGroupsDeleteToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.BuildsBetaGroupsDeleteToManyRelationshipExecute(r)
}

/*
BuildsBetaGroupsDeleteToManyRelationship Method for BuildsBetaGroupsDeleteToManyRelationship

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsBetaGroupsDeleteToManyRelationshipRequest
*/
func (a *BuildsApiService) BuildsBetaGroupsDeleteToManyRelationship(ctx context.Context, id string) ApiBuildsBetaGroupsDeleteToManyRelationshipRequest {
	return ApiBuildsBetaGroupsDeleteToManyRelationshipRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *BuildsApiService) BuildsBetaGroupsDeleteToManyRelationshipExecute(r ApiBuildsBetaGroupsDeleteToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsBetaGroupsDeleteToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/betaGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.buildBetaGroupsLinkagesRequest == nil {
		return nil, reportError("buildBetaGroupsLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildBetaGroupsLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiBuildsBuildBetaDetailGetToOneRelatedRequest struct {
	ctx                    context.Context
	ApiService             *BuildsApiService
	id                     string
	fieldsBuildBetaDetails *[]string
}

// the fields to include for returned resources of type buildBetaDetails
func (r ApiBuildsBuildBetaDetailGetToOneRelatedRequest) FieldsBuildBetaDetails(fieldsBuildBetaDetails []string) ApiBuildsBuildBetaDetailGetToOneRelatedRequest {
	r.fieldsBuildBetaDetails = &fieldsBuildBetaDetails
	return r
}

func (r ApiBuildsBuildBetaDetailGetToOneRelatedRequest) Execute() (*BuildBetaDetailWithoutIncludesResponse, *http.Response, error) {
	return r.ApiService.BuildsBuildBetaDetailGetToOneRelatedExecute(r)
}

/*
BuildsBuildBetaDetailGetToOneRelated Method for BuildsBuildBetaDetailGetToOneRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsBuildBetaDetailGetToOneRelatedRequest
*/
func (a *BuildsApiService) BuildsBuildBetaDetailGetToOneRelated(ctx context.Context, id string) ApiBuildsBuildBetaDetailGetToOneRelatedRequest {
	return ApiBuildsBuildBetaDetailGetToOneRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BuildBetaDetailWithoutIncludesResponse
func (a *BuildsApiService) BuildsBuildBetaDetailGetToOneRelatedExecute(r ApiBuildsBuildBetaDetailGetToOneRelatedRequest) (*BuildBetaDetailWithoutIncludesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BuildBetaDetailWithoutIncludesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsBuildBetaDetailGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/buildBetaDetail"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBuildBetaDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[buildBetaDetails]", r.fieldsBuildBetaDetails, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest struct {
	ctx                        context.Context
	ApiService                 *BuildsApiService
	id                         string
	filterDiagnosticType       *[]string
	fieldsDiagnosticSignatures *[]string
	limit                      *int32
}

// filter by attribute &#39;diagnosticType&#39;
func (r ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest) FilterDiagnosticType(filterDiagnosticType []string) ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest {
	r.filterDiagnosticType = &filterDiagnosticType
	return r
}

// the fields to include for returned resources of type diagnosticSignatures
func (r ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest) FieldsDiagnosticSignatures(fieldsDiagnosticSignatures []string) ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest {
	r.fieldsDiagnosticSignatures = &fieldsDiagnosticSignatures
	return r
}

// maximum resources per page
func (r ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest) Limit(limit int32) ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest) Execute() (*DiagnosticSignaturesResponse, *http.Response, error) {
	return r.ApiService.BuildsDiagnosticSignaturesGetToManyRelatedExecute(r)
}

/*
BuildsDiagnosticSignaturesGetToManyRelated Method for BuildsDiagnosticSignaturesGetToManyRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest
*/
func (a *BuildsApiService) BuildsDiagnosticSignaturesGetToManyRelated(ctx context.Context, id string) ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest {
	return ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return DiagnosticSignaturesResponse
func (a *BuildsApiService) BuildsDiagnosticSignaturesGetToManyRelatedExecute(r ApiBuildsDiagnosticSignaturesGetToManyRelatedRequest) (*DiagnosticSignaturesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *DiagnosticSignaturesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsDiagnosticSignaturesGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/diagnosticSignatures"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterDiagnosticType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[diagnosticType]", r.filterDiagnosticType, "csv")
	}
	if r.fieldsDiagnosticSignatures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[diagnosticSignatures]", r.fieldsDiagnosticSignatures, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsGetCollectionRequest struct {
	ctx                                          context.Context
	ApiService                                   *BuildsApiService
	filterBetaAppReviewSubmissionBetaReviewState *[]string
	filterBuildAudienceType                      *[]string
	filterExpired                                *[]string
	filterPreReleaseVersionPlatform              *[]string
	filterPreReleaseVersionVersion               *[]string
	filterProcessingState                        *[]string
	filterUsesNonExemptEncryption                *[]string
	filterVersion                                *[]string
	filterApp                                    *[]string
	filterAppStoreVersion                        *[]string
	filterBetaGroups                             *[]string
	filterPreReleaseVersion                      *[]string
	filterId                                     *[]string
	sort                                         *[]string
	fieldsBuilds                                 *[]string
	limit                                        *int32
	include                                      *[]string
	fieldsDiagnosticSignatures                   *[]string
	fieldsBuildIcons                             *[]string
	fieldsBuildBetaDetails                       *[]string
	fieldsBetaAppReviewSubmissions               *[]string
	fieldsBetaTesters                            *[]string
	fieldsAppStoreVersions                       *[]string
	fieldsBetaBuildLocalizations                 *[]string
	fieldsPreReleaseVersions                     *[]string
	fieldsAppEncryptionDeclarations              *[]string
	fieldsApps                                   *[]string
	fieldsPerfPowerMetrics                       *[]string
	limitBetaBuildLocalizations                  *int32
	limitBetaGroups                              *int32
	limitBuildBundles                            *int32
	limitIcons                                   *int32
	limitIndividualTesters                       *int32
}

// filter by attribute &#39;betaAppReviewSubmission.betaReviewState&#39;
func (r ApiBuildsGetCollectionRequest) FilterBetaAppReviewSubmissionBetaReviewState(filterBetaAppReviewSubmissionBetaReviewState []string) ApiBuildsGetCollectionRequest {
	r.filterBetaAppReviewSubmissionBetaReviewState = &filterBetaAppReviewSubmissionBetaReviewState
	return r
}

// filter by attribute &#39;buildAudienceType&#39;
func (r ApiBuildsGetCollectionRequest) FilterBuildAudienceType(filterBuildAudienceType []string) ApiBuildsGetCollectionRequest {
	r.filterBuildAudienceType = &filterBuildAudienceType
	return r
}

// filter by attribute &#39;expired&#39;
func (r ApiBuildsGetCollectionRequest) FilterExpired(filterExpired []string) ApiBuildsGetCollectionRequest {
	r.filterExpired = &filterExpired
	return r
}

// filter by attribute &#39;preReleaseVersion.platform&#39;
func (r ApiBuildsGetCollectionRequest) FilterPreReleaseVersionPlatform(filterPreReleaseVersionPlatform []string) ApiBuildsGetCollectionRequest {
	r.filterPreReleaseVersionPlatform = &filterPreReleaseVersionPlatform
	return r
}

// filter by attribute &#39;preReleaseVersion.version&#39;
func (r ApiBuildsGetCollectionRequest) FilterPreReleaseVersionVersion(filterPreReleaseVersionVersion []string) ApiBuildsGetCollectionRequest {
	r.filterPreReleaseVersionVersion = &filterPreReleaseVersionVersion
	return r
}

// filter by attribute &#39;processingState&#39;
func (r ApiBuildsGetCollectionRequest) FilterProcessingState(filterProcessingState []string) ApiBuildsGetCollectionRequest {
	r.filterProcessingState = &filterProcessingState
	return r
}

// filter by attribute &#39;usesNonExemptEncryption&#39;
func (r ApiBuildsGetCollectionRequest) FilterUsesNonExemptEncryption(filterUsesNonExemptEncryption []string) ApiBuildsGetCollectionRequest {
	r.filterUsesNonExemptEncryption = &filterUsesNonExemptEncryption
	return r
}

// filter by attribute &#39;version&#39;
func (r ApiBuildsGetCollectionRequest) FilterVersion(filterVersion []string) ApiBuildsGetCollectionRequest {
	r.filterVersion = &filterVersion
	return r
}

// filter by id(s) of related &#39;app&#39;
func (r ApiBuildsGetCollectionRequest) FilterApp(filterApp []string) ApiBuildsGetCollectionRequest {
	r.filterApp = &filterApp
	return r
}

// filter by id(s) of related &#39;appStoreVersion&#39;
func (r ApiBuildsGetCollectionRequest) FilterAppStoreVersion(filterAppStoreVersion []string) ApiBuildsGetCollectionRequest {
	r.filterAppStoreVersion = &filterAppStoreVersion
	return r
}

// filter by id(s) of related &#39;betaGroups&#39;
func (r ApiBuildsGetCollectionRequest) FilterBetaGroups(filterBetaGroups []string) ApiBuildsGetCollectionRequest {
	r.filterBetaGroups = &filterBetaGroups
	return r
}

// filter by id(s) of related &#39;preReleaseVersion&#39;
func (r ApiBuildsGetCollectionRequest) FilterPreReleaseVersion(filterPreReleaseVersion []string) ApiBuildsGetCollectionRequest {
	r.filterPreReleaseVersion = &filterPreReleaseVersion
	return r
}

// filter by id(s)
func (r ApiBuildsGetCollectionRequest) FilterId(filterId []string) ApiBuildsGetCollectionRequest {
	r.filterId = &filterId
	return r
}

// comma-separated list of sort expressions; resources will be sorted as specified
func (r ApiBuildsGetCollectionRequest) Sort(sort []string) ApiBuildsGetCollectionRequest {
	r.sort = &sort
	return r
}

// the fields to include for returned resources of type builds
func (r ApiBuildsGetCollectionRequest) FieldsBuilds(fieldsBuilds []string) ApiBuildsGetCollectionRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// maximum resources per page
func (r ApiBuildsGetCollectionRequest) Limit(limit int32) ApiBuildsGetCollectionRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiBuildsGetCollectionRequest) Include(include []string) ApiBuildsGetCollectionRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type diagnosticSignatures
func (r ApiBuildsGetCollectionRequest) FieldsDiagnosticSignatures(fieldsDiagnosticSignatures []string) ApiBuildsGetCollectionRequest {
	r.fieldsDiagnosticSignatures = &fieldsDiagnosticSignatures
	return r
}

// the fields to include for returned resources of type buildIcons
func (r ApiBuildsGetCollectionRequest) FieldsBuildIcons(fieldsBuildIcons []string) ApiBuildsGetCollectionRequest {
	r.fieldsBuildIcons = &fieldsBuildIcons
	return r
}

// the fields to include for returned resources of type buildBetaDetails
func (r ApiBuildsGetCollectionRequest) FieldsBuildBetaDetails(fieldsBuildBetaDetails []string) ApiBuildsGetCollectionRequest {
	r.fieldsBuildBetaDetails = &fieldsBuildBetaDetails
	return r
}

// the fields to include for returned resources of type betaAppReviewSubmissions
func (r ApiBuildsGetCollectionRequest) FieldsBetaAppReviewSubmissions(fieldsBetaAppReviewSubmissions []string) ApiBuildsGetCollectionRequest {
	r.fieldsBetaAppReviewSubmissions = &fieldsBetaAppReviewSubmissions
	return r
}

// the fields to include for returned resources of type betaTesters
func (r ApiBuildsGetCollectionRequest) FieldsBetaTesters(fieldsBetaTesters []string) ApiBuildsGetCollectionRequest {
	r.fieldsBetaTesters = &fieldsBetaTesters
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r ApiBuildsGetCollectionRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) ApiBuildsGetCollectionRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type betaBuildLocalizations
func (r ApiBuildsGetCollectionRequest) FieldsBetaBuildLocalizations(fieldsBetaBuildLocalizations []string) ApiBuildsGetCollectionRequest {
	r.fieldsBetaBuildLocalizations = &fieldsBetaBuildLocalizations
	return r
}

// the fields to include for returned resources of type preReleaseVersions
func (r ApiBuildsGetCollectionRequest) FieldsPreReleaseVersions(fieldsPreReleaseVersions []string) ApiBuildsGetCollectionRequest {
	r.fieldsPreReleaseVersions = &fieldsPreReleaseVersions
	return r
}

// the fields to include for returned resources of type appEncryptionDeclarations
func (r ApiBuildsGetCollectionRequest) FieldsAppEncryptionDeclarations(fieldsAppEncryptionDeclarations []string) ApiBuildsGetCollectionRequest {
	r.fieldsAppEncryptionDeclarations = &fieldsAppEncryptionDeclarations
	return r
}

// the fields to include for returned resources of type apps
func (r ApiBuildsGetCollectionRequest) FieldsApps(fieldsApps []string) ApiBuildsGetCollectionRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// the fields to include for returned resources of type perfPowerMetrics
func (r ApiBuildsGetCollectionRequest) FieldsPerfPowerMetrics(fieldsPerfPowerMetrics []string) ApiBuildsGetCollectionRequest {
	r.fieldsPerfPowerMetrics = &fieldsPerfPowerMetrics
	return r
}

// maximum number of related betaBuildLocalizations returned (when they are included)
func (r ApiBuildsGetCollectionRequest) LimitBetaBuildLocalizations(limitBetaBuildLocalizations int32) ApiBuildsGetCollectionRequest {
	r.limitBetaBuildLocalizations = &limitBetaBuildLocalizations
	return r
}

// maximum number of related betaGroups returned (when they are included)
func (r ApiBuildsGetCollectionRequest) LimitBetaGroups(limitBetaGroups int32) ApiBuildsGetCollectionRequest {
	r.limitBetaGroups = &limitBetaGroups
	return r
}

// maximum number of related buildBundles returned (when they are included)
func (r ApiBuildsGetCollectionRequest) LimitBuildBundles(limitBuildBundles int32) ApiBuildsGetCollectionRequest {
	r.limitBuildBundles = &limitBuildBundles
	return r
}

// maximum number of related icons returned (when they are included)
func (r ApiBuildsGetCollectionRequest) LimitIcons(limitIcons int32) ApiBuildsGetCollectionRequest {
	r.limitIcons = &limitIcons
	return r
}

// maximum number of related individualTesters returned (when they are included)
func (r ApiBuildsGetCollectionRequest) LimitIndividualTesters(limitIndividualTesters int32) ApiBuildsGetCollectionRequest {
	r.limitIndividualTesters = &limitIndividualTesters
	return r
}

func (r ApiBuildsGetCollectionRequest) Execute() (*BuildsResponse, *http.Response, error) {
	return r.ApiService.BuildsGetCollectionExecute(r)
}

/*
BuildsGetCollection Method for BuildsGetCollection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiBuildsGetCollectionRequest
*/
func (a *BuildsApiService) BuildsGetCollection(ctx context.Context) ApiBuildsGetCollectionRequest {
	return ApiBuildsGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return BuildsResponse
func (a *BuildsApiService) BuildsGetCollectionExecute(r ApiBuildsGetCollectionRequest) (*BuildsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BuildsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterBetaAppReviewSubmissionBetaReviewState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[betaAppReviewSubmission.betaReviewState]", r.filterBetaAppReviewSubmissionBetaReviewState, "csv")
	}
	if r.filterBuildAudienceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[buildAudienceType]", r.filterBuildAudienceType, "csv")
	}
	if r.filterExpired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[expired]", r.filterExpired, "csv")
	}
	if r.filterPreReleaseVersionPlatform != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[preReleaseVersion.platform]", r.filterPreReleaseVersionPlatform, "csv")
	}
	if r.filterPreReleaseVersionVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[preReleaseVersion.version]", r.filterPreReleaseVersionVersion, "csv")
	}
	if r.filterProcessingState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[processingState]", r.filterProcessingState, "csv")
	}
	if r.filterUsesNonExemptEncryption != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[usesNonExemptEncryption]", r.filterUsesNonExemptEncryption, "csv")
	}
	if r.filterVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[version]", r.filterVersion, "csv")
	}
	if r.filterApp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[app]", r.filterApp, "csv")
	}
	if r.filterAppStoreVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[appStoreVersion]", r.filterAppStoreVersion, "csv")
	}
	if r.filterBetaGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[betaGroups]", r.filterBetaGroups, "csv")
	}
	if r.filterPreReleaseVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[preReleaseVersion]", r.filterPreReleaseVersion, "csv")
	}
	if r.filterId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[id]", r.filterId, "csv")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "csv")
	}
	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsDiagnosticSignatures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[diagnosticSignatures]", r.fieldsDiagnosticSignatures, "csv")
	}
	if r.fieldsBuildIcons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[buildIcons]", r.fieldsBuildIcons, "csv")
	}
	if r.fieldsBuildBetaDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[buildBetaDetails]", r.fieldsBuildBetaDetails, "csv")
	}
	if r.fieldsBetaAppReviewSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaAppReviewSubmissions]", r.fieldsBetaAppReviewSubmissions, "csv")
	}
	if r.fieldsBetaTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaTesters]", r.fieldsBetaTesters, "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "csv")
	}
	if r.fieldsBetaBuildLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaBuildLocalizations]", r.fieldsBetaBuildLocalizations, "csv")
	}
	if r.fieldsPreReleaseVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[preReleaseVersions]", r.fieldsPreReleaseVersions, "csv")
	}
	if r.fieldsAppEncryptionDeclarations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEncryptionDeclarations]", r.fieldsAppEncryptionDeclarations, "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	if r.fieldsPerfPowerMetrics != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[perfPowerMetrics]", r.fieldsPerfPowerMetrics, "csv")
	}
	if r.limitBetaBuildLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[betaBuildLocalizations]", r.limitBetaBuildLocalizations, "")
	}
	if r.limitBetaGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[betaGroups]", r.limitBetaGroups, "")
	}
	if r.limitBuildBundles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[buildBundles]", r.limitBuildBundles, "")
	}
	if r.limitIcons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[icons]", r.limitIcons, "")
	}
	if r.limitIndividualTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[individualTesters]", r.limitIndividualTesters, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsGetInstanceRequest struct {
	ctx                             context.Context
	ApiService                      *BuildsApiService
	id                              string
	fieldsBuilds                    *[]string
	include                         *[]string
	fieldsDiagnosticSignatures      *[]string
	fieldsBuildIcons                *[]string
	fieldsBuildBetaDetails          *[]string
	fieldsBetaAppReviewSubmissions  *[]string
	fieldsBetaTesters               *[]string
	fieldsAppStoreVersions          *[]string
	fieldsBetaBuildLocalizations    *[]string
	fieldsPreReleaseVersions        *[]string
	fieldsAppEncryptionDeclarations *[]string
	fieldsApps                      *[]string
	fieldsPerfPowerMetrics          *[]string
	limitBetaBuildLocalizations     *int32
	limitBetaGroups                 *int32
	limitBuildBundles               *int32
	limitIcons                      *int32
	limitIndividualTesters          *int32
}

// the fields to include for returned resources of type builds
func (r ApiBuildsGetInstanceRequest) FieldsBuilds(fieldsBuilds []string) ApiBuildsGetInstanceRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// comma-separated list of relationships to include
func (r ApiBuildsGetInstanceRequest) Include(include []string) ApiBuildsGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type diagnosticSignatures
func (r ApiBuildsGetInstanceRequest) FieldsDiagnosticSignatures(fieldsDiagnosticSignatures []string) ApiBuildsGetInstanceRequest {
	r.fieldsDiagnosticSignatures = &fieldsDiagnosticSignatures
	return r
}

// the fields to include for returned resources of type buildIcons
func (r ApiBuildsGetInstanceRequest) FieldsBuildIcons(fieldsBuildIcons []string) ApiBuildsGetInstanceRequest {
	r.fieldsBuildIcons = &fieldsBuildIcons
	return r
}

// the fields to include for returned resources of type buildBetaDetails
func (r ApiBuildsGetInstanceRequest) FieldsBuildBetaDetails(fieldsBuildBetaDetails []string) ApiBuildsGetInstanceRequest {
	r.fieldsBuildBetaDetails = &fieldsBuildBetaDetails
	return r
}

// the fields to include for returned resources of type betaAppReviewSubmissions
func (r ApiBuildsGetInstanceRequest) FieldsBetaAppReviewSubmissions(fieldsBetaAppReviewSubmissions []string) ApiBuildsGetInstanceRequest {
	r.fieldsBetaAppReviewSubmissions = &fieldsBetaAppReviewSubmissions
	return r
}

// the fields to include for returned resources of type betaTesters
func (r ApiBuildsGetInstanceRequest) FieldsBetaTesters(fieldsBetaTesters []string) ApiBuildsGetInstanceRequest {
	r.fieldsBetaTesters = &fieldsBetaTesters
	return r
}

// the fields to include for returned resources of type appStoreVersions
func (r ApiBuildsGetInstanceRequest) FieldsAppStoreVersions(fieldsAppStoreVersions []string) ApiBuildsGetInstanceRequest {
	r.fieldsAppStoreVersions = &fieldsAppStoreVersions
	return r
}

// the fields to include for returned resources of type betaBuildLocalizations
func (r ApiBuildsGetInstanceRequest) FieldsBetaBuildLocalizations(fieldsBetaBuildLocalizations []string) ApiBuildsGetInstanceRequest {
	r.fieldsBetaBuildLocalizations = &fieldsBetaBuildLocalizations
	return r
}

// the fields to include for returned resources of type preReleaseVersions
func (r ApiBuildsGetInstanceRequest) FieldsPreReleaseVersions(fieldsPreReleaseVersions []string) ApiBuildsGetInstanceRequest {
	r.fieldsPreReleaseVersions = &fieldsPreReleaseVersions
	return r
}

// the fields to include for returned resources of type appEncryptionDeclarations
func (r ApiBuildsGetInstanceRequest) FieldsAppEncryptionDeclarations(fieldsAppEncryptionDeclarations []string) ApiBuildsGetInstanceRequest {
	r.fieldsAppEncryptionDeclarations = &fieldsAppEncryptionDeclarations
	return r
}

// the fields to include for returned resources of type apps
func (r ApiBuildsGetInstanceRequest) FieldsApps(fieldsApps []string) ApiBuildsGetInstanceRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// the fields to include for returned resources of type perfPowerMetrics
func (r ApiBuildsGetInstanceRequest) FieldsPerfPowerMetrics(fieldsPerfPowerMetrics []string) ApiBuildsGetInstanceRequest {
	r.fieldsPerfPowerMetrics = &fieldsPerfPowerMetrics
	return r
}

// maximum number of related betaBuildLocalizations returned (when they are included)
func (r ApiBuildsGetInstanceRequest) LimitBetaBuildLocalizations(limitBetaBuildLocalizations int32) ApiBuildsGetInstanceRequest {
	r.limitBetaBuildLocalizations = &limitBetaBuildLocalizations
	return r
}

// maximum number of related betaGroups returned (when they are included)
func (r ApiBuildsGetInstanceRequest) LimitBetaGroups(limitBetaGroups int32) ApiBuildsGetInstanceRequest {
	r.limitBetaGroups = &limitBetaGroups
	return r
}

// maximum number of related buildBundles returned (when they are included)
func (r ApiBuildsGetInstanceRequest) LimitBuildBundles(limitBuildBundles int32) ApiBuildsGetInstanceRequest {
	r.limitBuildBundles = &limitBuildBundles
	return r
}

// maximum number of related icons returned (when they are included)
func (r ApiBuildsGetInstanceRequest) LimitIcons(limitIcons int32) ApiBuildsGetInstanceRequest {
	r.limitIcons = &limitIcons
	return r
}

// maximum number of related individualTesters returned (when they are included)
func (r ApiBuildsGetInstanceRequest) LimitIndividualTesters(limitIndividualTesters int32) ApiBuildsGetInstanceRequest {
	r.limitIndividualTesters = &limitIndividualTesters
	return r
}

func (r ApiBuildsGetInstanceRequest) Execute() (*BuildResponse, *http.Response, error) {
	return r.ApiService.BuildsGetInstanceExecute(r)
}

/*
BuildsGetInstance Method for BuildsGetInstance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsGetInstanceRequest
*/
func (a *BuildsApiService) BuildsGetInstance(ctx context.Context, id string) ApiBuildsGetInstanceRequest {
	return ApiBuildsGetInstanceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BuildResponse
func (a *BuildsApiService) BuildsGetInstanceExecute(r ApiBuildsGetInstanceRequest) (*BuildResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BuildResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsDiagnosticSignatures != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[diagnosticSignatures]", r.fieldsDiagnosticSignatures, "csv")
	}
	if r.fieldsBuildIcons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[buildIcons]", r.fieldsBuildIcons, "csv")
	}
	if r.fieldsBuildBetaDetails != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[buildBetaDetails]", r.fieldsBuildBetaDetails, "csv")
	}
	if r.fieldsBetaAppReviewSubmissions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaAppReviewSubmissions]", r.fieldsBetaAppReviewSubmissions, "csv")
	}
	if r.fieldsBetaTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaTesters]", r.fieldsBetaTesters, "csv")
	}
	if r.fieldsAppStoreVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appStoreVersions]", r.fieldsAppStoreVersions, "csv")
	}
	if r.fieldsBetaBuildLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaBuildLocalizations]", r.fieldsBetaBuildLocalizations, "csv")
	}
	if r.fieldsPreReleaseVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[preReleaseVersions]", r.fieldsPreReleaseVersions, "csv")
	}
	if r.fieldsAppEncryptionDeclarations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[appEncryptionDeclarations]", r.fieldsAppEncryptionDeclarations, "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	if r.fieldsPerfPowerMetrics != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[perfPowerMetrics]", r.fieldsPerfPowerMetrics, "csv")
	}
	if r.limitBetaBuildLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[betaBuildLocalizations]", r.limitBetaBuildLocalizations, "")
	}
	if r.limitBetaGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[betaGroups]", r.limitBetaGroups, "")
	}
	if r.limitBuildBundles != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[buildBundles]", r.limitBuildBundles, "")
	}
	if r.limitIcons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[icons]", r.limitIcons, "")
	}
	if r.limitIndividualTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[individualTesters]", r.limitIndividualTesters, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsIconsGetToManyRelatedRequest struct {
	ctx              context.Context
	ApiService       *BuildsApiService
	id               string
	fieldsBuildIcons *[]string
	limit            *int32
}

// the fields to include for returned resources of type buildIcons
func (r ApiBuildsIconsGetToManyRelatedRequest) FieldsBuildIcons(fieldsBuildIcons []string) ApiBuildsIconsGetToManyRelatedRequest {
	r.fieldsBuildIcons = &fieldsBuildIcons
	return r
}

// maximum resources per page
func (r ApiBuildsIconsGetToManyRelatedRequest) Limit(limit int32) ApiBuildsIconsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r ApiBuildsIconsGetToManyRelatedRequest) Execute() (*BuildIconsWithoutIncludesResponse, *http.Response, error) {
	return r.ApiService.BuildsIconsGetToManyRelatedExecute(r)
}

/*
BuildsIconsGetToManyRelated Method for BuildsIconsGetToManyRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsIconsGetToManyRelatedRequest
*/
func (a *BuildsApiService) BuildsIconsGetToManyRelated(ctx context.Context, id string) ApiBuildsIconsGetToManyRelatedRequest {
	return ApiBuildsIconsGetToManyRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BuildIconsWithoutIncludesResponse
func (a *BuildsApiService) BuildsIconsGetToManyRelatedExecute(r ApiBuildsIconsGetToManyRelatedRequest) (*BuildIconsWithoutIncludesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BuildIconsWithoutIncludesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsIconsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/icons"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBuildIcons != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[buildIcons]", r.fieldsBuildIcons, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsIndividualTestersCreateToManyRelationshipRequest struct {
	ctx                                   context.Context
	ApiService                            *BuildsApiService
	id                                    string
	buildIndividualTestersLinkagesRequest *BuildIndividualTestersLinkagesRequest
}

// List of related linkages
func (r ApiBuildsIndividualTestersCreateToManyRelationshipRequest) BuildIndividualTestersLinkagesRequest(buildIndividualTestersLinkagesRequest BuildIndividualTestersLinkagesRequest) ApiBuildsIndividualTestersCreateToManyRelationshipRequest {
	r.buildIndividualTestersLinkagesRequest = &buildIndividualTestersLinkagesRequest
	return r
}

func (r ApiBuildsIndividualTestersCreateToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.BuildsIndividualTestersCreateToManyRelationshipExecute(r)
}

/*
BuildsIndividualTestersCreateToManyRelationship Method for BuildsIndividualTestersCreateToManyRelationship

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsIndividualTestersCreateToManyRelationshipRequest
*/
func (a *BuildsApiService) BuildsIndividualTestersCreateToManyRelationship(ctx context.Context, id string) ApiBuildsIndividualTestersCreateToManyRelationshipRequest {
	return ApiBuildsIndividualTestersCreateToManyRelationshipRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *BuildsApiService) BuildsIndividualTestersCreateToManyRelationshipExecute(r ApiBuildsIndividualTestersCreateToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsIndividualTestersCreateToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/individualTesters"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.buildIndividualTestersLinkagesRequest == nil {
		return nil, reportError("buildIndividualTestersLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildIndividualTestersLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiBuildsIndividualTestersDeleteToManyRelationshipRequest struct {
	ctx                                   context.Context
	ApiService                            *BuildsApiService
	id                                    string
	buildIndividualTestersLinkagesRequest *BuildIndividualTestersLinkagesRequest
}

// List of related linkages
func (r ApiBuildsIndividualTestersDeleteToManyRelationshipRequest) BuildIndividualTestersLinkagesRequest(buildIndividualTestersLinkagesRequest BuildIndividualTestersLinkagesRequest) ApiBuildsIndividualTestersDeleteToManyRelationshipRequest {
	r.buildIndividualTestersLinkagesRequest = &buildIndividualTestersLinkagesRequest
	return r
}

func (r ApiBuildsIndividualTestersDeleteToManyRelationshipRequest) Execute() (*http.Response, error) {
	return r.ApiService.BuildsIndividualTestersDeleteToManyRelationshipExecute(r)
}

/*
BuildsIndividualTestersDeleteToManyRelationship Method for BuildsIndividualTestersDeleteToManyRelationship

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsIndividualTestersDeleteToManyRelationshipRequest
*/
func (a *BuildsApiService) BuildsIndividualTestersDeleteToManyRelationship(ctx context.Context, id string) ApiBuildsIndividualTestersDeleteToManyRelationshipRequest {
	return ApiBuildsIndividualTestersDeleteToManyRelationshipRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *BuildsApiService) BuildsIndividualTestersDeleteToManyRelationshipExecute(r ApiBuildsIndividualTestersDeleteToManyRelationshipRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsIndividualTestersDeleteToManyRelationship")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/individualTesters"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.buildIndividualTestersLinkagesRequest == nil {
		return nil, reportError("buildIndividualTestersLinkagesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildIndividualTestersLinkagesRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiBuildsIndividualTestersGetToManyRelatedRequest struct {
	ctx               context.Context
	ApiService        *BuildsApiService
	id                string
	fieldsBetaTesters *[]string
	limit             *int32
}

// the fields to include for returned resources of type betaTesters
func (r ApiBuildsIndividualTestersGetToManyRelatedRequest) FieldsBetaTesters(fieldsBetaTesters []string) ApiBuildsIndividualTestersGetToManyRelatedRequest {
	r.fieldsBetaTesters = &fieldsBetaTesters
	return r
}

// maximum resources per page
func (r ApiBuildsIndividualTestersGetToManyRelatedRequest) Limit(limit int32) ApiBuildsIndividualTestersGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r ApiBuildsIndividualTestersGetToManyRelatedRequest) Execute() (*BetaTestersWithoutIncludesResponse, *http.Response, error) {
	return r.ApiService.BuildsIndividualTestersGetToManyRelatedExecute(r)
}

/*
BuildsIndividualTestersGetToManyRelated Method for BuildsIndividualTestersGetToManyRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsIndividualTestersGetToManyRelatedRequest
*/
func (a *BuildsApiService) BuildsIndividualTestersGetToManyRelated(ctx context.Context, id string) ApiBuildsIndividualTestersGetToManyRelatedRequest {
	return ApiBuildsIndividualTestersGetToManyRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BetaTestersWithoutIncludesResponse
func (a *BuildsApiService) BuildsIndividualTestersGetToManyRelatedExecute(r ApiBuildsIndividualTestersGetToManyRelatedRequest) (*BetaTestersWithoutIncludesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BetaTestersWithoutIncludesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsIndividualTestersGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/individualTesters"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBetaTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[betaTesters]", r.fieldsBetaTesters, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsIndividualTestersGetToManyRelationshipRequest struct {
	ctx        context.Context
	ApiService *BuildsApiService
	id         string
	limit      *int32
}

// maximum resources per page
func (r ApiBuildsIndividualTestersGetToManyRelationshipRequest) Limit(limit int32) ApiBuildsIndividualTestersGetToManyRelationshipRequest {
	r.limit = &limit
	return r
}

func (r ApiBuildsIndividualTestersGetToManyRelationshipRequest) Execute() (*BuildIndividualTestersLinkagesResponse, *http.Response, error) {
	return r.ApiService.BuildsIndividualTestersGetToManyRelationshipExecute(r)
}

/*
BuildsIndividualTestersGetToManyRelationship Method for BuildsIndividualTestersGetToManyRelationship

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsIndividualTestersGetToManyRelationshipRequest
*/
func (a *BuildsApiService) BuildsIndividualTestersGetToManyRelationship(ctx context.Context, id string) ApiBuildsIndividualTestersGetToManyRelationshipRequest {
	return ApiBuildsIndividualTestersGetToManyRelationshipRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BuildIndividualTestersLinkagesResponse
func (a *BuildsApiService) BuildsIndividualTestersGetToManyRelationshipExecute(r ApiBuildsIndividualTestersGetToManyRelationshipRequest) (*BuildIndividualTestersLinkagesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BuildIndividualTestersLinkagesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsIndividualTestersGetToManyRelationship")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/relationships/individualTesters"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsPerfPowerMetricsGetToManyRelatedRequest struct {
	ctx              context.Context
	ApiService       *BuildsApiService
	id               string
	filterDeviceType *[]string
	filterMetricType *[]string
	filterPlatform   *[]string
}

// filter by attribute &#39;deviceType&#39;
func (r ApiBuildsPerfPowerMetricsGetToManyRelatedRequest) FilterDeviceType(filterDeviceType []string) ApiBuildsPerfPowerMetricsGetToManyRelatedRequest {
	r.filterDeviceType = &filterDeviceType
	return r
}

// filter by attribute &#39;metricType&#39;
func (r ApiBuildsPerfPowerMetricsGetToManyRelatedRequest) FilterMetricType(filterMetricType []string) ApiBuildsPerfPowerMetricsGetToManyRelatedRequest {
	r.filterMetricType = &filterMetricType
	return r
}

// filter by attribute &#39;platform&#39;
func (r ApiBuildsPerfPowerMetricsGetToManyRelatedRequest) FilterPlatform(filterPlatform []string) ApiBuildsPerfPowerMetricsGetToManyRelatedRequest {
	r.filterPlatform = &filterPlatform
	return r
}

func (r ApiBuildsPerfPowerMetricsGetToManyRelatedRequest) Execute() (*XcodeMetrics, *http.Response, error) {
	return r.ApiService.BuildsPerfPowerMetricsGetToManyRelatedExecute(r)
}

/*
BuildsPerfPowerMetricsGetToManyRelated Method for BuildsPerfPowerMetricsGetToManyRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsPerfPowerMetricsGetToManyRelatedRequest
*/
func (a *BuildsApiService) BuildsPerfPowerMetricsGetToManyRelated(ctx context.Context, id string) ApiBuildsPerfPowerMetricsGetToManyRelatedRequest {
	return ApiBuildsPerfPowerMetricsGetToManyRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return XcodeMetrics
func (a *BuildsApiService) BuildsPerfPowerMetricsGetToManyRelatedExecute(r ApiBuildsPerfPowerMetricsGetToManyRelatedRequest) (*XcodeMetrics, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *XcodeMetrics
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsPerfPowerMetricsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/perfPowerMetrics"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterDeviceType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[deviceType]", r.filterDeviceType, "csv")
	}
	if r.filterMetricType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[metricType]", r.filterMetricType, "csv")
	}
	if r.filterPlatform != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[platform]", r.filterPlatform, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/vnd.apple.xcode-metrics+json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsPreReleaseVersionGetToOneRelatedRequest struct {
	ctx                      context.Context
	ApiService               *BuildsApiService
	id                       string
	fieldsPreReleaseVersions *[]string
}

// the fields to include for returned resources of type preReleaseVersions
func (r ApiBuildsPreReleaseVersionGetToOneRelatedRequest) FieldsPreReleaseVersions(fieldsPreReleaseVersions []string) ApiBuildsPreReleaseVersionGetToOneRelatedRequest {
	r.fieldsPreReleaseVersions = &fieldsPreReleaseVersions
	return r
}

func (r ApiBuildsPreReleaseVersionGetToOneRelatedRequest) Execute() (*PrereleaseVersionWithoutIncludesResponse, *http.Response, error) {
	return r.ApiService.BuildsPreReleaseVersionGetToOneRelatedExecute(r)
}

/*
BuildsPreReleaseVersionGetToOneRelated Method for BuildsPreReleaseVersionGetToOneRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsPreReleaseVersionGetToOneRelatedRequest
*/
func (a *BuildsApiService) BuildsPreReleaseVersionGetToOneRelated(ctx context.Context, id string) ApiBuildsPreReleaseVersionGetToOneRelatedRequest {
	return ApiBuildsPreReleaseVersionGetToOneRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PrereleaseVersionWithoutIncludesResponse
func (a *BuildsApiService) BuildsPreReleaseVersionGetToOneRelatedExecute(r ApiBuildsPreReleaseVersionGetToOneRelatedRequest) (*PrereleaseVersionWithoutIncludesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrereleaseVersionWithoutIncludesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsPreReleaseVersionGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/preReleaseVersion"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsPreReleaseVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[preReleaseVersions]", r.fieldsPreReleaseVersions, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsUpdateInstanceRequest struct {
	ctx                context.Context
	ApiService         *BuildsApiService
	id                 string
	buildUpdateRequest *BuildUpdateRequest
}

// Build representation
func (r ApiBuildsUpdateInstanceRequest) BuildUpdateRequest(buildUpdateRequest BuildUpdateRequest) ApiBuildsUpdateInstanceRequest {
	r.buildUpdateRequest = &buildUpdateRequest
	return r
}

func (r ApiBuildsUpdateInstanceRequest) Execute() (*BuildResponse, *http.Response, error) {
	return r.ApiService.BuildsUpdateInstanceExecute(r)
}

/*
BuildsUpdateInstance Method for BuildsUpdateInstance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiBuildsUpdateInstanceRequest
*/
func (a *BuildsApiService) BuildsUpdateInstance(ctx context.Context, id string) ApiBuildsUpdateInstanceRequest {
	return ApiBuildsUpdateInstanceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BuildResponse
func (a *BuildsApiService) BuildsUpdateInstanceExecute(r ApiBuildsUpdateInstanceRequest) (*BuildResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BuildResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BuildsApiService.BuildsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.buildUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("buildUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.buildUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
