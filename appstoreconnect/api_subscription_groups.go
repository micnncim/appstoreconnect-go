/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// SubscriptionGroupsApiService SubscriptionGroupsApi service
type SubscriptionGroupsApiService service

type ApiSubscriptionGroupsCreateInstanceRequest struct {
	ctx                            context.Context
	ApiService                     *SubscriptionGroupsApiService
	subscriptionGroupCreateRequest *SubscriptionGroupCreateRequest
}

// SubscriptionGroup representation
func (r ApiSubscriptionGroupsCreateInstanceRequest) SubscriptionGroupCreateRequest(subscriptionGroupCreateRequest SubscriptionGroupCreateRequest) ApiSubscriptionGroupsCreateInstanceRequest {
	r.subscriptionGroupCreateRequest = &subscriptionGroupCreateRequest
	return r
}

func (r ApiSubscriptionGroupsCreateInstanceRequest) Execute() (*SubscriptionGroupResponse, *http.Response, error) {
	return r.ApiService.SubscriptionGroupsCreateInstanceExecute(r)
}

/*
SubscriptionGroupsCreateInstance Method for SubscriptionGroupsCreateInstance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSubscriptionGroupsCreateInstanceRequest
*/
func (a *SubscriptionGroupsApiService) SubscriptionGroupsCreateInstance(ctx context.Context) ApiSubscriptionGroupsCreateInstanceRequest {
	return ApiSubscriptionGroupsCreateInstanceRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return SubscriptionGroupResponse
func (a *SubscriptionGroupsApiService) SubscriptionGroupsCreateInstanceExecute(r ApiSubscriptionGroupsCreateInstanceRequest) (*SubscriptionGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionGroupsApiService.SubscriptionGroupsCreateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionGroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subscriptionGroupCreateRequest == nil {
		return localVarReturnValue, nil, reportError("subscriptionGroupCreateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.subscriptionGroupCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscriptionGroupsDeleteInstanceRequest struct {
	ctx        context.Context
	ApiService *SubscriptionGroupsApiService
	id         string
}

func (r ApiSubscriptionGroupsDeleteInstanceRequest) Execute() (*http.Response, error) {
	return r.ApiService.SubscriptionGroupsDeleteInstanceExecute(r)
}

/*
SubscriptionGroupsDeleteInstance Method for SubscriptionGroupsDeleteInstance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiSubscriptionGroupsDeleteInstanceRequest
*/
func (a *SubscriptionGroupsApiService) SubscriptionGroupsDeleteInstance(ctx context.Context, id string) ApiSubscriptionGroupsDeleteInstanceRequest {
	return ApiSubscriptionGroupsDeleteInstanceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
func (a *SubscriptionGroupsApiService) SubscriptionGroupsDeleteInstanceExecute(r ApiSubscriptionGroupsDeleteInstanceRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionGroupsApiService.SubscriptionGroupsDeleteInstance")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionGroups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSubscriptionGroupsGetInstanceRequest struct {
	ctx                                  context.Context
	ApiService                           *SubscriptionGroupsApiService
	id                                   string
	fieldsSubscriptionGroups             *[]string
	include                              *[]string
	fieldsSubscriptions                  *[]string
	fieldsSubscriptionGroupLocalizations *[]string
	limitSubscriptionGroupLocalizations  *int32
	limitSubscriptions                   *int32
}

// the fields to include for returned resources of type subscriptionGroups
func (r ApiSubscriptionGroupsGetInstanceRequest) FieldsSubscriptionGroups(fieldsSubscriptionGroups []string) ApiSubscriptionGroupsGetInstanceRequest {
	r.fieldsSubscriptionGroups = &fieldsSubscriptionGroups
	return r
}

// comma-separated list of relationships to include
func (r ApiSubscriptionGroupsGetInstanceRequest) Include(include []string) ApiSubscriptionGroupsGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type subscriptions
func (r ApiSubscriptionGroupsGetInstanceRequest) FieldsSubscriptions(fieldsSubscriptions []string) ApiSubscriptionGroupsGetInstanceRequest {
	r.fieldsSubscriptions = &fieldsSubscriptions
	return r
}

// the fields to include for returned resources of type subscriptionGroupLocalizations
func (r ApiSubscriptionGroupsGetInstanceRequest) FieldsSubscriptionGroupLocalizations(fieldsSubscriptionGroupLocalizations []string) ApiSubscriptionGroupsGetInstanceRequest {
	r.fieldsSubscriptionGroupLocalizations = &fieldsSubscriptionGroupLocalizations
	return r
}

// maximum number of related subscriptionGroupLocalizations returned (when they are included)
func (r ApiSubscriptionGroupsGetInstanceRequest) LimitSubscriptionGroupLocalizations(limitSubscriptionGroupLocalizations int32) ApiSubscriptionGroupsGetInstanceRequest {
	r.limitSubscriptionGroupLocalizations = &limitSubscriptionGroupLocalizations
	return r
}

// maximum number of related subscriptions returned (when they are included)
func (r ApiSubscriptionGroupsGetInstanceRequest) LimitSubscriptions(limitSubscriptions int32) ApiSubscriptionGroupsGetInstanceRequest {
	r.limitSubscriptions = &limitSubscriptions
	return r
}

func (r ApiSubscriptionGroupsGetInstanceRequest) Execute() (*SubscriptionGroupResponse, *http.Response, error) {
	return r.ApiService.SubscriptionGroupsGetInstanceExecute(r)
}

/*
SubscriptionGroupsGetInstance Method for SubscriptionGroupsGetInstance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiSubscriptionGroupsGetInstanceRequest
*/
func (a *SubscriptionGroupsApiService) SubscriptionGroupsGetInstance(ctx context.Context, id string) ApiSubscriptionGroupsGetInstanceRequest {
	return ApiSubscriptionGroupsGetInstanceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SubscriptionGroupResponse
func (a *SubscriptionGroupsApiService) SubscriptionGroupsGetInstanceExecute(r ApiSubscriptionGroupsGetInstanceRequest) (*SubscriptionGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionGroupsApiService.SubscriptionGroupsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionGroups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsSubscriptionGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionGroups]", r.fieldsSubscriptionGroups, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsSubscriptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptions]", r.fieldsSubscriptions, "csv")
	}
	if r.fieldsSubscriptionGroupLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionGroupLocalizations]", r.fieldsSubscriptionGroupLocalizations, "csv")
	}
	if r.limitSubscriptionGroupLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[subscriptionGroupLocalizations]", r.limitSubscriptionGroupLocalizations, "")
	}
	if r.limitSubscriptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[subscriptions]", r.limitSubscriptions, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedRequest struct {
	ctx                                  context.Context
	ApiService                           *SubscriptionGroupsApiService
	id                                   string
	fieldsSubscriptionGroups             *[]string
	fieldsSubscriptionGroupLocalizations *[]string
	limit                                *int32
	include                              *[]string
}

// the fields to include for returned resources of type subscriptionGroups
func (r ApiSubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedRequest) FieldsSubscriptionGroups(fieldsSubscriptionGroups []string) ApiSubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedRequest {
	r.fieldsSubscriptionGroups = &fieldsSubscriptionGroups
	return r
}

// the fields to include for returned resources of type subscriptionGroupLocalizations
func (r ApiSubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedRequest) FieldsSubscriptionGroupLocalizations(fieldsSubscriptionGroupLocalizations []string) ApiSubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedRequest {
	r.fieldsSubscriptionGroupLocalizations = &fieldsSubscriptionGroupLocalizations
	return r
}

// maximum resources per page
func (r ApiSubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedRequest) Limit(limit int32) ApiSubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiSubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedRequest) Include(include []string) ApiSubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiSubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedRequest) Execute() (*SubscriptionGroupLocalizationsResponse, *http.Response, error) {
	return r.ApiService.SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedExecute(r)
}

/*
SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated Method for SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiSubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedRequest
*/
func (a *SubscriptionGroupsApiService) SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated(ctx context.Context, id string) ApiSubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedRequest {
	return ApiSubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SubscriptionGroupLocalizationsResponse
func (a *SubscriptionGroupsApiService) SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedExecute(r ApiSubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelatedRequest) (*SubscriptionGroupLocalizationsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionGroupLocalizationsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionGroupsApiService.SubscriptionGroupsSubscriptionGroupLocalizationsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionGroups/{id}/subscriptionGroupLocalizations"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsSubscriptionGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionGroups]", r.fieldsSubscriptionGroups, "csv")
	}
	if r.fieldsSubscriptionGroupLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionGroupLocalizations]", r.fieldsSubscriptionGroupLocalizations, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest struct {
	ctx                                         context.Context
	ApiService                                  *SubscriptionGroupsApiService
	id                                          string
	filterName                                  *[]string
	filterProductId                             *[]string
	filterState                                 *[]string
	sort                                        *[]string
	fieldsPromotedPurchases                     *[]string
	fieldsSubscriptionPromotionalOffers         *[]string
	fieldsSubscriptionOfferCodes                *[]string
	fieldsSubscriptionAppStoreReviewScreenshots *[]string
	fieldsSubscriptions                         *[]string
	fieldsSubscriptionAvailabilities            *[]string
	fieldsSubscriptionGroups                    *[]string
	fieldsSubscriptionIntroductoryOffers        *[]string
	fieldsSubscriptionPrices                    *[]string
	fieldsSubscriptionLocalizations             *[]string
	limit                                       *int32
	limitSubscriptionLocalizations              *int32
	limitIntroductoryOffers                     *int32
	limitPromotionalOffers                      *int32
	limitOfferCodes                             *int32
	limitPrices                                 *int32
	include                                     *[]string
}

// filter by attribute &#39;name&#39;
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) FilterName(filterName []string) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.filterName = &filterName
	return r
}

// filter by attribute &#39;productId&#39;
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) FilterProductId(filterProductId []string) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.filterProductId = &filterProductId
	return r
}

// filter by attribute &#39;state&#39;
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) FilterState(filterState []string) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.filterState = &filterState
	return r
}

// comma-separated list of sort expressions; resources will be sorted as specified
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) Sort(sort []string) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.sort = &sort
	return r
}

// the fields to include for returned resources of type promotedPurchases
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) FieldsPromotedPurchases(fieldsPromotedPurchases []string) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.fieldsPromotedPurchases = &fieldsPromotedPurchases
	return r
}

// the fields to include for returned resources of type subscriptionPromotionalOffers
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) FieldsSubscriptionPromotionalOffers(fieldsSubscriptionPromotionalOffers []string) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.fieldsSubscriptionPromotionalOffers = &fieldsSubscriptionPromotionalOffers
	return r
}

// the fields to include for returned resources of type subscriptionOfferCodes
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) FieldsSubscriptionOfferCodes(fieldsSubscriptionOfferCodes []string) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.fieldsSubscriptionOfferCodes = &fieldsSubscriptionOfferCodes
	return r
}

// the fields to include for returned resources of type subscriptionAppStoreReviewScreenshots
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) FieldsSubscriptionAppStoreReviewScreenshots(fieldsSubscriptionAppStoreReviewScreenshots []string) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.fieldsSubscriptionAppStoreReviewScreenshots = &fieldsSubscriptionAppStoreReviewScreenshots
	return r
}

// the fields to include for returned resources of type subscriptions
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) FieldsSubscriptions(fieldsSubscriptions []string) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.fieldsSubscriptions = &fieldsSubscriptions
	return r
}

// the fields to include for returned resources of type subscriptionAvailabilities
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) FieldsSubscriptionAvailabilities(fieldsSubscriptionAvailabilities []string) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.fieldsSubscriptionAvailabilities = &fieldsSubscriptionAvailabilities
	return r
}

// the fields to include for returned resources of type subscriptionGroups
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) FieldsSubscriptionGroups(fieldsSubscriptionGroups []string) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.fieldsSubscriptionGroups = &fieldsSubscriptionGroups
	return r
}

// the fields to include for returned resources of type subscriptionIntroductoryOffers
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) FieldsSubscriptionIntroductoryOffers(fieldsSubscriptionIntroductoryOffers []string) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.fieldsSubscriptionIntroductoryOffers = &fieldsSubscriptionIntroductoryOffers
	return r
}

// the fields to include for returned resources of type subscriptionPrices
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) FieldsSubscriptionPrices(fieldsSubscriptionPrices []string) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.fieldsSubscriptionPrices = &fieldsSubscriptionPrices
	return r
}

// the fields to include for returned resources of type subscriptionLocalizations
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) FieldsSubscriptionLocalizations(fieldsSubscriptionLocalizations []string) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.fieldsSubscriptionLocalizations = &fieldsSubscriptionLocalizations
	return r
}

// maximum resources per page
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) Limit(limit int32) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

// maximum number of related subscriptionLocalizations returned (when they are included)
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) LimitSubscriptionLocalizations(limitSubscriptionLocalizations int32) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.limitSubscriptionLocalizations = &limitSubscriptionLocalizations
	return r
}

// maximum number of related introductoryOffers returned (when they are included)
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) LimitIntroductoryOffers(limitIntroductoryOffers int32) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.limitIntroductoryOffers = &limitIntroductoryOffers
	return r
}

// maximum number of related promotionalOffers returned (when they are included)
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) LimitPromotionalOffers(limitPromotionalOffers int32) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.limitPromotionalOffers = &limitPromotionalOffers
	return r
}

// maximum number of related offerCodes returned (when they are included)
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) LimitOfferCodes(limitOfferCodes int32) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.limitOfferCodes = &limitOfferCodes
	return r
}

// maximum number of related prices returned (when they are included)
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) LimitPrices(limitPrices int32) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.limitPrices = &limitPrices
	return r
}

// comma-separated list of relationships to include
func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) Include(include []string) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	r.include = &include
	return r
}

func (r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) Execute() (*SubscriptionsResponse, *http.Response, error) {
	return r.ApiService.SubscriptionGroupsSubscriptionsGetToManyRelatedExecute(r)
}

/*
SubscriptionGroupsSubscriptionsGetToManyRelated Method for SubscriptionGroupsSubscriptionsGetToManyRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest
*/
func (a *SubscriptionGroupsApiService) SubscriptionGroupsSubscriptionsGetToManyRelated(ctx context.Context, id string) ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest {
	return ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SubscriptionsResponse
func (a *SubscriptionGroupsApiService) SubscriptionGroupsSubscriptionsGetToManyRelatedExecute(r ApiSubscriptionGroupsSubscriptionsGetToManyRelatedRequest) (*SubscriptionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionGroupsApiService.SubscriptionGroupsSubscriptionsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionGroups/{id}/subscriptions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[name]", r.filterName, "csv")
	}
	if r.filterProductId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[productId]", r.filterProductId, "csv")
	}
	if r.filterState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[state]", r.filterState, "csv")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "csv")
	}
	if r.fieldsPromotedPurchases != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[promotedPurchases]", r.fieldsPromotedPurchases, "csv")
	}
	if r.fieldsSubscriptionPromotionalOffers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionPromotionalOffers]", r.fieldsSubscriptionPromotionalOffers, "csv")
	}
	if r.fieldsSubscriptionOfferCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionOfferCodes]", r.fieldsSubscriptionOfferCodes, "csv")
	}
	if r.fieldsSubscriptionAppStoreReviewScreenshots != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionAppStoreReviewScreenshots]", r.fieldsSubscriptionAppStoreReviewScreenshots, "csv")
	}
	if r.fieldsSubscriptions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptions]", r.fieldsSubscriptions, "csv")
	}
	if r.fieldsSubscriptionAvailabilities != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionAvailabilities]", r.fieldsSubscriptionAvailabilities, "csv")
	}
	if r.fieldsSubscriptionGroups != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionGroups]", r.fieldsSubscriptionGroups, "csv")
	}
	if r.fieldsSubscriptionIntroductoryOffers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionIntroductoryOffers]", r.fieldsSubscriptionIntroductoryOffers, "csv")
	}
	if r.fieldsSubscriptionPrices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionPrices]", r.fieldsSubscriptionPrices, "csv")
	}
	if r.fieldsSubscriptionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[subscriptionLocalizations]", r.fieldsSubscriptionLocalizations, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.limitSubscriptionLocalizations != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[subscriptionLocalizations]", r.limitSubscriptionLocalizations, "")
	}
	if r.limitIntroductoryOffers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[introductoryOffers]", r.limitIntroductoryOffers, "")
	}
	if r.limitPromotionalOffers != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[promotionalOffers]", r.limitPromotionalOffers, "")
	}
	if r.limitOfferCodes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[offerCodes]", r.limitOfferCodes, "")
	}
	if r.limitPrices != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[prices]", r.limitPrices, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSubscriptionGroupsUpdateInstanceRequest struct {
	ctx                            context.Context
	ApiService                     *SubscriptionGroupsApiService
	id                             string
	subscriptionGroupUpdateRequest *SubscriptionGroupUpdateRequest
}

// SubscriptionGroup representation
func (r ApiSubscriptionGroupsUpdateInstanceRequest) SubscriptionGroupUpdateRequest(subscriptionGroupUpdateRequest SubscriptionGroupUpdateRequest) ApiSubscriptionGroupsUpdateInstanceRequest {
	r.subscriptionGroupUpdateRequest = &subscriptionGroupUpdateRequest
	return r
}

func (r ApiSubscriptionGroupsUpdateInstanceRequest) Execute() (*SubscriptionGroupResponse, *http.Response, error) {
	return r.ApiService.SubscriptionGroupsUpdateInstanceExecute(r)
}

/*
SubscriptionGroupsUpdateInstance Method for SubscriptionGroupsUpdateInstance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiSubscriptionGroupsUpdateInstanceRequest
*/
func (a *SubscriptionGroupsApiService) SubscriptionGroupsUpdateInstance(ctx context.Context, id string) ApiSubscriptionGroupsUpdateInstanceRequest {
	return ApiSubscriptionGroupsUpdateInstanceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return SubscriptionGroupResponse
func (a *SubscriptionGroupsApiService) SubscriptionGroupsUpdateInstanceExecute(r ApiSubscriptionGroupsUpdateInstanceRequest) (*SubscriptionGroupResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SubscriptionGroupResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SubscriptionGroupsApiService.SubscriptionGroupsUpdateInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/subscriptionGroups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.subscriptionGroupUpdateRequest == nil {
		return localVarReturnValue, nil, reportError("subscriptionGroupUpdateRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.subscriptionGroupUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
