/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package appstoreconnect

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

// PreReleaseVersionsApiService PreReleaseVersionsApi service
type PreReleaseVersionsApiService service

type ApiPreReleaseVersionsAppGetToOneRelatedRequest struct {
	ctx        context.Context
	ApiService *PreReleaseVersionsApiService
	id         string
	fieldsApps *[]string
}

// the fields to include for returned resources of type apps
func (r ApiPreReleaseVersionsAppGetToOneRelatedRequest) FieldsApps(fieldsApps []string) ApiPreReleaseVersionsAppGetToOneRelatedRequest {
	r.fieldsApps = &fieldsApps
	return r
}

func (r ApiPreReleaseVersionsAppGetToOneRelatedRequest) Execute() (*AppWithoutIncludesResponse, *http.Response, error) {
	return r.ApiService.PreReleaseVersionsAppGetToOneRelatedExecute(r)
}

/*
PreReleaseVersionsAppGetToOneRelated Method for PreReleaseVersionsAppGetToOneRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiPreReleaseVersionsAppGetToOneRelatedRequest
*/
func (a *PreReleaseVersionsApiService) PreReleaseVersionsAppGetToOneRelated(ctx context.Context, id string) ApiPreReleaseVersionsAppGetToOneRelatedRequest {
	return ApiPreReleaseVersionsAppGetToOneRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return AppWithoutIncludesResponse
func (a *PreReleaseVersionsApiService) PreReleaseVersionsAppGetToOneRelatedExecute(r ApiPreReleaseVersionsAppGetToOneRelatedRequest) (*AppWithoutIncludesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppWithoutIncludesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PreReleaseVersionsApiService.PreReleaseVersionsAppGetToOneRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/preReleaseVersions/{id}/app"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPreReleaseVersionsBuildsGetToManyRelatedRequest struct {
	ctx          context.Context
	ApiService   *PreReleaseVersionsApiService
	id           string
	fieldsBuilds *[]string
	limit        *int32
}

// the fields to include for returned resources of type builds
func (r ApiPreReleaseVersionsBuildsGetToManyRelatedRequest) FieldsBuilds(fieldsBuilds []string) ApiPreReleaseVersionsBuildsGetToManyRelatedRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// maximum resources per page
func (r ApiPreReleaseVersionsBuildsGetToManyRelatedRequest) Limit(limit int32) ApiPreReleaseVersionsBuildsGetToManyRelatedRequest {
	r.limit = &limit
	return r
}

func (r ApiPreReleaseVersionsBuildsGetToManyRelatedRequest) Execute() (*BuildsWithoutIncludesResponse, *http.Response, error) {
	return r.ApiService.PreReleaseVersionsBuildsGetToManyRelatedExecute(r)
}

/*
PreReleaseVersionsBuildsGetToManyRelated Method for PreReleaseVersionsBuildsGetToManyRelated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiPreReleaseVersionsBuildsGetToManyRelatedRequest
*/
func (a *PreReleaseVersionsApiService) PreReleaseVersionsBuildsGetToManyRelated(ctx context.Context, id string) ApiPreReleaseVersionsBuildsGetToManyRelatedRequest {
	return ApiPreReleaseVersionsBuildsGetToManyRelatedRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return BuildsWithoutIncludesResponse
func (a *PreReleaseVersionsApiService) PreReleaseVersionsBuildsGetToManyRelatedExecute(r ApiPreReleaseVersionsBuildsGetToManyRelatedRequest) (*BuildsWithoutIncludesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *BuildsWithoutIncludesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PreReleaseVersionsApiService.PreReleaseVersionsBuildsGetToManyRelated")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/preReleaseVersions/{id}/builds"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPreReleaseVersionsGetCollectionRequest struct {
	ctx                         context.Context
	ApiService                  *PreReleaseVersionsApiService
	filterBuildsExpired         *[]string
	filterBuildsProcessingState *[]string
	filterBuildsVersion         *[]string
	filterPlatform              *[]string
	filterVersion               *[]string
	filterApp                   *[]string
	filterBuilds                *[]string
	sort                        *[]string
	fieldsPreReleaseVersions    *[]string
	limit                       *int32
	include                     *[]string
	fieldsApps                  *[]string
	fieldsBuilds                *[]string
	limitBuilds                 *int32
}

// filter by attribute &#39;builds.expired&#39;
func (r ApiPreReleaseVersionsGetCollectionRequest) FilterBuildsExpired(filterBuildsExpired []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.filterBuildsExpired = &filterBuildsExpired
	return r
}

// filter by attribute &#39;builds.processingState&#39;
func (r ApiPreReleaseVersionsGetCollectionRequest) FilterBuildsProcessingState(filterBuildsProcessingState []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.filterBuildsProcessingState = &filterBuildsProcessingState
	return r
}

// filter by attribute &#39;builds.version&#39;
func (r ApiPreReleaseVersionsGetCollectionRequest) FilterBuildsVersion(filterBuildsVersion []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.filterBuildsVersion = &filterBuildsVersion
	return r
}

// filter by attribute &#39;platform&#39;
func (r ApiPreReleaseVersionsGetCollectionRequest) FilterPlatform(filterPlatform []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.filterPlatform = &filterPlatform
	return r
}

// filter by attribute &#39;version&#39;
func (r ApiPreReleaseVersionsGetCollectionRequest) FilterVersion(filterVersion []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.filterVersion = &filterVersion
	return r
}

// filter by id(s) of related &#39;app&#39;
func (r ApiPreReleaseVersionsGetCollectionRequest) FilterApp(filterApp []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.filterApp = &filterApp
	return r
}

// filter by id(s) of related &#39;builds&#39;
func (r ApiPreReleaseVersionsGetCollectionRequest) FilterBuilds(filterBuilds []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.filterBuilds = &filterBuilds
	return r
}

// comma-separated list of sort expressions; resources will be sorted as specified
func (r ApiPreReleaseVersionsGetCollectionRequest) Sort(sort []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.sort = &sort
	return r
}

// the fields to include for returned resources of type preReleaseVersions
func (r ApiPreReleaseVersionsGetCollectionRequest) FieldsPreReleaseVersions(fieldsPreReleaseVersions []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.fieldsPreReleaseVersions = &fieldsPreReleaseVersions
	return r
}

// maximum resources per page
func (r ApiPreReleaseVersionsGetCollectionRequest) Limit(limit int32) ApiPreReleaseVersionsGetCollectionRequest {
	r.limit = &limit
	return r
}

// comma-separated list of relationships to include
func (r ApiPreReleaseVersionsGetCollectionRequest) Include(include []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type apps
func (r ApiPreReleaseVersionsGetCollectionRequest) FieldsApps(fieldsApps []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// the fields to include for returned resources of type builds
func (r ApiPreReleaseVersionsGetCollectionRequest) FieldsBuilds(fieldsBuilds []string) ApiPreReleaseVersionsGetCollectionRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// maximum number of related builds returned (when they are included)
func (r ApiPreReleaseVersionsGetCollectionRequest) LimitBuilds(limitBuilds int32) ApiPreReleaseVersionsGetCollectionRequest {
	r.limitBuilds = &limitBuilds
	return r
}

func (r ApiPreReleaseVersionsGetCollectionRequest) Execute() (*PreReleaseVersionsResponse, *http.Response, error) {
	return r.ApiService.PreReleaseVersionsGetCollectionExecute(r)
}

/*
PreReleaseVersionsGetCollection Method for PreReleaseVersionsGetCollection

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPreReleaseVersionsGetCollectionRequest
*/
func (a *PreReleaseVersionsApiService) PreReleaseVersionsGetCollection(ctx context.Context) ApiPreReleaseVersionsGetCollectionRequest {
	return ApiPreReleaseVersionsGetCollectionRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PreReleaseVersionsResponse
func (a *PreReleaseVersionsApiService) PreReleaseVersionsGetCollectionExecute(r ApiPreReleaseVersionsGetCollectionRequest) (*PreReleaseVersionsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PreReleaseVersionsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PreReleaseVersionsApiService.PreReleaseVersionsGetCollection")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/preReleaseVersions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.filterBuildsExpired != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[builds.expired]", r.filterBuildsExpired, "csv")
	}
	if r.filterBuildsProcessingState != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[builds.processingState]", r.filterBuildsProcessingState, "csv")
	}
	if r.filterBuildsVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[builds.version]", r.filterBuildsVersion, "csv")
	}
	if r.filterPlatform != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[platform]", r.filterPlatform, "csv")
	}
	if r.filterVersion != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[version]", r.filterVersion, "csv")
	}
	if r.filterApp != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[app]", r.filterApp, "csv")
	}
	if r.filterBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[builds]", r.filterBuilds, "csv")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "csv")
	}
	if r.fieldsPreReleaseVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[preReleaseVersions]", r.fieldsPreReleaseVersions, "csv")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "csv")
	}
	if r.limitBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[builds]", r.limitBuilds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPreReleaseVersionsGetInstanceRequest struct {
	ctx                      context.Context
	ApiService               *PreReleaseVersionsApiService
	id                       string
	fieldsPreReleaseVersions *[]string
	include                  *[]string
	fieldsApps               *[]string
	fieldsBuilds             *[]string
	limitBuilds              *int32
}

// the fields to include for returned resources of type preReleaseVersions
func (r ApiPreReleaseVersionsGetInstanceRequest) FieldsPreReleaseVersions(fieldsPreReleaseVersions []string) ApiPreReleaseVersionsGetInstanceRequest {
	r.fieldsPreReleaseVersions = &fieldsPreReleaseVersions
	return r
}

// comma-separated list of relationships to include
func (r ApiPreReleaseVersionsGetInstanceRequest) Include(include []string) ApiPreReleaseVersionsGetInstanceRequest {
	r.include = &include
	return r
}

// the fields to include for returned resources of type apps
func (r ApiPreReleaseVersionsGetInstanceRequest) FieldsApps(fieldsApps []string) ApiPreReleaseVersionsGetInstanceRequest {
	r.fieldsApps = &fieldsApps
	return r
}

// the fields to include for returned resources of type builds
func (r ApiPreReleaseVersionsGetInstanceRequest) FieldsBuilds(fieldsBuilds []string) ApiPreReleaseVersionsGetInstanceRequest {
	r.fieldsBuilds = &fieldsBuilds
	return r
}

// maximum number of related builds returned (when they are included)
func (r ApiPreReleaseVersionsGetInstanceRequest) LimitBuilds(limitBuilds int32) ApiPreReleaseVersionsGetInstanceRequest {
	r.limitBuilds = &limitBuilds
	return r
}

func (r ApiPreReleaseVersionsGetInstanceRequest) Execute() (*PrereleaseVersionResponse, *http.Response, error) {
	return r.ApiService.PreReleaseVersionsGetInstanceExecute(r)
}

/*
PreReleaseVersionsGetInstance Method for PreReleaseVersionsGetInstance

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id the id of the requested resource
	@return ApiPreReleaseVersionsGetInstanceRequest
*/
func (a *PreReleaseVersionsApiService) PreReleaseVersionsGetInstance(ctx context.Context, id string) ApiPreReleaseVersionsGetInstanceRequest {
	return ApiPreReleaseVersionsGetInstanceRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PrereleaseVersionResponse
func (a *PreReleaseVersionsApiService) PreReleaseVersionsGetInstanceExecute(r ApiPreReleaseVersionsGetInstanceRequest) (*PrereleaseVersionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PrereleaseVersionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PreReleaseVersionsApiService.PreReleaseVersionsGetInstance")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/preReleaseVersions/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.fieldsPreReleaseVersions != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[preReleaseVersions]", r.fieldsPreReleaseVersions, "csv")
	}
	if r.include != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "include", r.include, "csv")
	}
	if r.fieldsApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[apps]", r.fieldsApps, "csv")
	}
	if r.fieldsBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fields[builds]", r.fieldsBuilds, "csv")
	}
	if r.limitBuilds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit[builds]", r.limitBuilds, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
